version: '2'

networks:
  services:
    ipam:
      config:
        - subnet: 173.17.0.0/24

services:

  ca.org1.example.com:
    image: hyperledger/fabric-ca
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca-org1
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/0e729224e8b3f31784c8a93c5b8ef6f4c1c91d9e6e577c45c33163609fe40011_sk
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem
      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/0e729224e8b3f31784c8a93c5b8ef6f4c1c91d9e6e577c45c33163609fe40011_sk
    ports:
      - "7054:7054"
    command: sh -c 'fabric-ca-server start --cfg.identities.allowremove --cfg.affiliations.allowremove -b admin:adminpw -d'
    volumes:
      - ./channel/crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
    container_name: ca_peerOrg1

  ca.org2.example.com:
    image: hyperledger/fabric-ca
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca-org2
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org2.example.com-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/a7d47efa46a6ba07730c850fed2c1375df27360d7227f48cdc2f80e505678005_sk
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org2.example.com-cert.pem
      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/a7d47efa46a6ba07730c850fed2c1375df27360d7227f48cdc2f80e505678005_sk
    ports:
      - "8054:7054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ./channel/crypto-config/peerOrganizations/org2.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
    container_name: ca_peerOrg2

  orderer.example.com:
    container_name: orderer.example.com
    image: hyperledger/fabric-orderer
    environment:
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/crypto/orderer/msp
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/crypto/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/crypto/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/crypto/orderer/tls/ca.crt, /etc/hyperledger/crypto/peerOrg1/tls/ca.crt, /etc/hyperledger/crypto/peerOrg2/tls/ca.crt]
      - ORDERER_OPERATIONS_TLS_ENABLED=false  # enable TLS for operations
      - ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:8443  # operation RESTful API
      #- ORDERER_OPERATIONS_LISTENADDRESS=orderer.example.com:8443  # operation RESTful API
      - ORDERER_METRICS_PROVIDER=prometheus  # prometheus will pull metrics from orderer via /metrics RESTful API
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderers
    command: orderer
    ports:
      - 7050:7050
      - 8443:8443
    volumes:
        - ./channel:/etc/hyperledger/configtx
        - ./channel/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/:/etc/hyperledger/crypto/orderer
        - ./channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/:/etc/hyperledger/crypto/peerOrg1
        - ./channel/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/:/etc/hyperledger/crypto/peerOrg2

  peer0.org1.example.com:
    container_name: peer0.org1.example.com
    extends:
      file:   base.yaml
      service: peer-base
    environment:
      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org1.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
      - CORE_OPERATIONS_TLS_ENABLED=false # enable TLS for operations
      #- CORE_OPERATIONS_LISTENADDRESS=peer0.org1.example.com:9443  # operation RESTful API
      - CORE_OPERATIONS_LISTENADDRESS=0.0.0.0:9443  # operation RESTful API
      - CORE_METRICS_PROVIDER=prometheus  # prometheus will pull metrics from orderer via /metrics RESTful API
    ports:
      - 7051:7051
      - 7053:7053
      - 9443:9443
    volumes:
        - ./channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/:/etc/hyperledger/crypto/peer
    depends_on:
      - orderer.example.com
      - couchdb

  peer1.org1.example.com:
    container_name: peer1.org1.example.com
    extends:
      file:   base.yaml
      service: peer-base
    environment:
      - CORE_PEER_ID=peer1.org1.example.com
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_ADDRESS=peer1.org1.example.com:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:7051
      - CORE_OPERATIONS_TLS_ENABLED=false # enable TLS for operations
      #- CORE_OPERATIONS_LISTENADDRESS=peer1.org1.example.com:9444  # operation RESTful API
      - CORE_OPERATIONS_LISTENADDRESS=0.0.0.0:9444  # operation RESTful API
      - CORE_METRICS_PROVIDER=prometheus  # prometheus will pull metrics from orderer via /metrics RESTful API
    ports:
      - 7056:7051
      - 7058:7053
      - 9444:9444
    volumes:
        - ./channel/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/:/etc/hyperledger/crypto/peer
    depends_on:
      - orderer.example.com
      - couchdb

  peer0.org2.example.com:
    container_name: peer0.org2.example.com
    extends:
      file:   base.yaml
      service: peer-base
    environment:
      - CORE_PEER_ID=peer0.org2.example.com
      - CORE_PEER_LOCALMSPID=Org2MSP
      - CORE_PEER_ADDRESS=peer0.org2.example.com:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org2.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:7051
      #- CORE_OPERATIONS_TLS_ENABLED=false # enable TLS for operations
      - CORE_OPERATIONS_LISTENADDRESS=0.0.0.0:9445  # operation RESTful API
      #- CORE_OPERATIONS_LISTENADDRESS=peer0.org2.example.com:9445  # operation RESTful API
      - CORE_METRICS_PROVIDER=prometheus  # prometheus will pull metrics from orderer via /metrics RESTful API
    ports:
      - 8051:7051
      - 8053:7053
      - 9445:9445
    volumes:
        - ./channel/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/:/etc/hyperledger/crypto/peer
    depends_on:
      - orderer.example.com
      - couchdb

  peer1.org2.example.com:
    container_name: peer1.org2.example.com
    extends:
      file:   base.yaml
      service: peer-base
    environment:
      - CORE_PEER_ID=peer1.org2.example.com
      - CORE_PEER_LOCALMSPID=Org2MSP
      - CORE_PEER_ADDRESS=peer1.org2.example.com:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org2.example.com:7051
      - CORE_OPERATIONS_TLS_ENABLED=false # enable TLS for operations
      #- CORE_OPERATIONS_LISTENADDRESS=peer1.org2.example.com:9446  # operation RESTful API
      - CORE_OPERATIONS_LISTENADDRESS=0.0.0.0:9446  # operation RESTful API
      - CORE_METRICS_PROVIDER=prometheus  # prometheus will pull metrics from orderer via /metrics RESTful API
    ports:
      - 8056:7051
      - 8058:7053
      - 9446:9446
    volumes:
        - ./channel/crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/:/etc/hyperledger/crypto/peer
    depends_on:
      - orderer.example.com
      - couchdb
  couchdb:
    container_name: couchdb
    image: hyperledger/fabric-couchdb
    # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password
    # for CouchDB.  This will prevent CouchDB from operating in an "Admin Party" mode.
    environment:
      - COUCHDB_USER=
      - COUCHDB_PASSWORD=
    ports:
      - 5984:5984  
  mongo:
    container_name: mongo
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8082:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
    depends_on: 
      - mongo

  #
  # Webserver
  #
  webserver:
    image: indy-node
    build:
      context: .
      dockerfile: ../indy/pool.dockerfile
    command: 'bash -c ''./scripts/start_webserver.sh'''
    environment:
      - IP=173.17.0.101
      - IPS=173.17.0.101,173.17.0.102,173.17.0.103,173.17.0.104
      - HOST=173.17.0.100
      - RUST_LOG=${RUST_LOG}
    networks:
      services:
        ipv4_address: 173.17.0.100
    ports:
      - 9000:8000
    depends_on:
      - node1
      - node2
      - node3
      - node4
    volumes:
      - ../indy/server:/home/indy/server
      - webserver-cli:/home/indy/.indy-cli
      - node1-data:/home/indy/.mnt/node1
      - node2-data:/home/indy/.mnt/node2
      - node3-data:/home/indy/.mnt/node3
      - node4-data:/home/indy/.mnt/node4

  #
  # Nodes
  #
  node1:
    image: indy-node
    command: 'bash -c ''./scripts/start_node.sh 1'''
    networks:
      services:
        ipv4_address: 173.17.0.101
    ports:
      - 9701:9701
      - 9702:9702
    environment:
      - IP=173.17.0.101
      - IPS=173.17.0.101,173.17.0.102,173.17.0.103,173.17.0.104
#      - HOST=173.17.0.101
      - RUST_LOG=${RUST_LOG}
    volumes:
      - node1-data:/home/indy/ledger

  node2:
    image: indy-node
    command: 'bash -c ''./scripts/start_node.sh 2'''
    networks:
      services:
        ipv4_address: 173.17.0.102
    ports:
      - 9703:9703
      - 9704:9704
    environment:
      - IP=173.17.0.101
      - IPS=173.17.0.101,173.17.0.102,173.17.0.103,173.17.0.104
      - RUST_LOG=${RUST_LOG}
#      - HOST=173.17.0.102
    volumes:
      - node2-data:/home/indy/ledger

  node3:
    image: indy-node
    command: 'bash -c ''./scripts/start_node.sh 3'''
    networks:
      services:
        ipv4_address: 173.17.0.103
    ports:
      - 9705:9705
      - 9706:9706
    environment:
      - IP=173.17.0.101
      - IPS=173.17.0.101,173.17.0.102,173.17.0.103,173.17.0.104
#      - HOST=173.17.0.103
      - RUST_LOG=${RUST_LOG}
    volumes:
      - node3-data:/home/indy/ledger

  node4:
    image: indy-node
    command: 'bash -c ''./scripts/start_node.sh 4'''
    networks:
      services:
        ipv4_address: 173.17.0.104
    ports:
      - 9707:9707
      - 9708:9708
    environment:
      - IP=173.17.0.101
      - IPS=173.17.0.101,173.17.0.102,173.17.0.103,173.17.0.104
#      - HOST=173.17.0.104
      - RUST_LOG=${RUST_LOG}
    volumes:
      - node4-data:/home/indy/ledger

  #
  # Agents
  #
  salman:
    image: indy-agentjs
    build:
      context: .
      dockerfile: ../indy/agent.dockerfile
    command: "bash -c 'sleep 10; npm start'"
    environment:
      - ICON_SRC=https://maxcdn.icons8.com/Share/icon/Users/person_female1600.png
      - THEME=DarkGray
      - PORT=3000
      - NAME=Salman
      - EMAIL=slaman@email.com
      - PASSWORD=123
      - USERNAME=salman
      - PUBLIC_DID_ENDPOINT=173.17.0.150:3000
      - RUST_LOG=${RUST_LOG}
      - TEST_POOL_IP=${TEST_POOL_IP}
    ports:
      - 3000:3000
    depends_on:
      - node1
      - node2
      - node3
      - node4
    networks:
      services:
        ipv4_address: 173.17.0.150
    volumes:
      - node1-data:/home/indy/ledger

  salman-ui:
    container_name: salman-ui
    image: salman-ui
    ports: 
     - 4001:80
    depends_on:
      - salman
    
  waseem:
    image: indy-agentjs
    build:
      context: .
      dockerfile: ../indy/agent.dockerfile
    command: "bash -c 'sleep 10; npm start'"
    environment:
      - ICON_SRC=https://maxcdn.icons8.com/Share/icon/Users/person_female1600.png
      - THEME=DarkGray
      - PORT=3001
      - NAME=waseem
      - EMAIL=waseem@email.com
      - PASSWORD=123
      - USERNAME=waseem
      - PUBLIC_DID_ENDPOINT=173.17.0.140:3001
      - RUST_LOG=${RUST_LOG}
      - TEST_POOL_IP=${TEST_POOL_IP}
    ports:
      - 3001:3001
    depends_on:
      - node1
      - node2
      - node3
      - node4
    networks:
      services:
        ipv4_address: 173.17.0.140
    volumes:
      - node1-data:/home/indy/ledger

  waseem-ui:
    container_name: waseem-ui
    image: waseem-ui
    ports: 
     - 4002:80
    depends_on:
      - waseem

  umt:
    image: indy-agentjs
    command: "bash -c 'sleep 10; npm start'"
    environment:
      - ICON_SRC=https://cdn2.iconfinder.com/data/icons/bubble-education-icons-1/360/School-512.png
      - THEME=OliveDrab
      - PORT=3002
      - NAME=UMT
      - EMAIL=admin@umt.edu
      - PASSWORD=123
      - USERNAME=umt
      - PUBLIC_DID_ENDPOINT=173.17.0.130:3002
      - RUST_LOG=${RUST_LOG}
      - TEST_POOL_IP=${TEST_POOL_IP}
    ports:
      - 3002:3002
    depends_on:
      - node1
      - node2
      - node3
      - node4
    networks:
      services:
        ipv4_address: 173.17.0.130
    volumes:
      - node1-data:/home/indy/ledger

  umt-ui:
    container_name: umt-ui
    image: umt-ui
    ports: 
     - 4003:80
    depends_on:
      - umt

  minitech:
    image: indy-agentjs
    command: "bash -c 'sleep 10; npm start'"
    environment:
      - ICON_SRC=https://i.ytimg.com/vi/JUMufld7UcY/maxresdefault.jpg
      - THEME=LightSteelBlue
      - PORT=3003
      - NAME=Mini Tech
      - EMAIL=admin@minitech.com
      - PASSWORD=123
      - USERNAME=minitech
      - PUBLIC_DID_ENDPOINT=173.17.0.120:3003
      - RUST_LOG=${RUST_LOG}
      - TEST_POOL_IP=${TEST_POOL_IP}
    ports:
      - 3003:3003
    depends_on:
      - node1
      - node2
      - node3
      - node4
    networks:
      services:
        ipv4_address: 173.17.0.120
    volumes:
      - node1-data:/home/indy/ledger

  minitech-ui:
    container_name: minitech-ui
    image: minitech-ui
    ports: 
     - 4004:80
    depends_on:
      - minitech

  college:
    image: indy-agentjs
    command: "bash -c 'sleep 10; npm start'"
    environment:
      - ICON_SRC=https://i.ytimg.com/vi/JUMufld7UcY/maxresdefault.jpg
      - THEME=LightSteelBlue
      - PORT=3004
      - NAME=Govt. College
      - EMAIL=college@govt.com
      - PASSWORD=123
      - USERNAME=college
      - PUBLIC_DID_ENDPOINT=173.17.0.110:3004
      - RUST_LOG=${RUST_LOG}
      - TEST_POOL_IP=${TEST_POOL_IP}
    ports:
      - 3004:3004
    depends_on:
      - node1
      - node2
      - node3
      - node4
    networks:
      services:
        ipv4_address: 173.17.0.110
    volumes:
      - node1-data:/home/indy/ledger

  college-ui:
    container_name: college-ui
    image: college-ui
    ports: 
     - 4005:80
    depends_on:
      - college

volumes:
  webserver-cli:
  node1-data:
  node2-data:
  node3-data:
  node4-data:

  # userServer:
  #   container_name: userserver
  #   build:
  #     context: ../../user-panel/server
  #   image: userserver
  #   # ports: 
  #   #  - 8090:8080
  #   depends_on: 
  #     - mongo
  #     - mongo-express

  # user-ui:
  #   container_name: userui
  #   build:
  #     context: ../../user-panel/frontend
  #   image: userui
  #   ports: 
  #    - 4300:80
  #   depends_on:
  #     - userServer

  # client:
  #   container_name: serverui
  #   build:
  #     context: ../../admin-panel
  #   image: serverui
  #   ports: 
  #    - 4200:80
  #   depends_on:
  #     - ca.org1.example.com
  #     - ca.org2.example.com
  #     - orderer.example.com
  #     - peer0.org1.example.com
  #     - peer1.org1.example.com
  #     - peer0.org2.example.com
  #     - peer1.org2.example.com
  #     - couchdb
  #     - mongo
  #     - mongo-express