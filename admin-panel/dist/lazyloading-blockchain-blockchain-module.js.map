{"version":3,"sources":["webpack:///./src/app/lazyloading/blockchain/blockchain.module.ts","webpack:///./src/app/lazyloading/blockchain/blockchainhome/blockchainhome.component.html","webpack:///./src/app/lazyloading/blockchain/blockchainhome/blockchainhome.component.scss","webpack:///./src/app/lazyloading/blockchain/blockchainhome/blockchainhome.component.ts","webpack:///./src/app/lazyloading/blockchain/ca/add-member/add-member.component.html","webpack:///./src/app/lazyloading/blockchain/ca/add-member/add-member.component.scss","webpack:///./src/app/lazyloading/blockchain/ca/add-member/add-member.component.ts","webpack:///./src/app/lazyloading/blockchain/ca/list-members/list-members.component.html","webpack:///./src/app/lazyloading/blockchain/ca/list-members/list-members.component.scss","webpack:///./src/app/lazyloading/blockchain/ca/list-members/list-members.component.ts","webpack:///./src/app/lazyloading/blockchain/chaincode/addcc/addcc.component.html","webpack:///./src/app/lazyloading/blockchain/chaincode/addcc/addcc.component.scss","webpack:///./src/app/lazyloading/blockchain/chaincode/addcc/addcc.component.ts","webpack:///./src/app/lazyloading/blockchain/chaincode/initiate-cc/initiate-cc.component.html","webpack:///./src/app/lazyloading/blockchain/chaincode/initiate-cc/initiate-cc.component.scss","webpack:///./src/app/lazyloading/blockchain/chaincode/initiate-cc/initiate-cc.component.ts","webpack:///./src/app/lazyloading/blockchain/chaincode/install-chaincode/install-chaincode.component.html","webpack:///./src/app/lazyloading/blockchain/chaincode/install-chaincode/install-chaincode.component.scss","webpack:///./src/app/lazyloading/blockchain/chaincode/install-chaincode/install-chaincode.component.ts","webpack:///./src/app/lazyloading/blockchain/chaincode/list-chaincode/list-chaincode.component.html","webpack:///./src/app/lazyloading/blockchain/chaincode/list-chaincode/list-chaincode.component.scss","webpack:///./src/app/lazyloading/blockchain/chaincode/list-chaincode/list-chaincode.component.ts","webpack:///./src/app/lazyloading/blockchain/channel/add-channel/add-channel.component.html","webpack:///./src/app/lazyloading/blockchain/channel/add-channel/add-channel.component.scss","webpack:///./src/app/lazyloading/blockchain/channel/add-channel/add-channel.component.ts","webpack:///./src/app/lazyloading/blockchain/channel/managechannels/managechannels.component.html","webpack:///./src/app/lazyloading/blockchain/channel/managechannels/managechannels.component.scss","webpack:///./src/app/lazyloading/blockchain/channel/managechannels/managechannels.component.ts","webpack:///./src/app/lazyloading/blockchain/channel/request-channel/request-channel.component.html","webpack:///./src/app/lazyloading/blockchain/channel/request-channel/request-channel.component.scss","webpack:///./src/app/lazyloading/blockchain/channel/request-channel/request-channel.component.ts","webpack:///./src/app/lazyloading/blockchain/notification/all-notifications/all-notifications.component.html","webpack:///./src/app/lazyloading/blockchain/notification/all-notifications/all-notifications.component.scss","webpack:///./src/app/lazyloading/blockchain/notification/all-notifications/all-notifications.component.ts","webpack:///./src/app/lazyloading/blockchain/notification/completed-notifications/completed-notifications.component.html","webpack:///./src/app/lazyloading/blockchain/notification/completed-notifications/completed-notifications.component.scss","webpack:///./src/app/lazyloading/blockchain/notification/completed-notifications/completed-notifications.component.ts","webpack:///./src/app/lazyloading/blockchain/notification/manage-notifications/manage-notifications.component.html","webpack:///./src/app/lazyloading/blockchain/notification/manage-notifications/manage-notifications.component.scss","webpack:///./src/app/lazyloading/blockchain/notification/manage-notifications/manage-notifications.component.ts","webpack:///./src/app/lazyloading/blockchain/notification/pending-notifications/pending-notifications.component.html","webpack:///./src/app/lazyloading/blockchain/notification/pending-notifications/pending-notifications.component.scss","webpack:///./src/app/lazyloading/blockchain/notification/pending-notifications/pending-notifications.component.ts","webpack:///./src/app/lazyloading/blockchain/organization/add-members-certificates/add-member-certificates-dialog/add-member-certificates-dialog.component.html","webpack:///./src/app/lazyloading/blockchain/organization/add-members-certificates/add-member-certificates-dialog/add-member-certificates-dialog.component.scss","webpack:///./src/app/lazyloading/blockchain/organization/add-members-certificates/add-member-certificates-dialog/add-member-certificates-dialog.component.ts","webpack:///./src/app/lazyloading/blockchain/organization/add-members-certificates/add-members-certificates.component.html","webpack:///./src/app/lazyloading/blockchain/organization/add-members-certificates/add-members-certificates.component.scss","webpack:///./src/app/lazyloading/blockchain/organization/add-members-certificates/add-members-certificates.component.ts","webpack:///./src/app/lazyloading/blockchain/peers/add-peer/add-peer.component.html","webpack:///./src/app/lazyloading/blockchain/peers/add-peer/add-peer.component.scss","webpack:///./src/app/lazyloading/blockchain/peers/add-peer/add-peer.component.ts","webpack:///./src/app/lazyloading/blockchain/peers/list-peers/list-peers.component.html","webpack:///./src/app/lazyloading/blockchain/peers/list-peers/list-peers.component.scss","webpack:///./src/app/lazyloading/blockchain/peers/list-peers/list-peers.component.ts","webpack:///./src/app/models/chaincode.ts","webpack:///./src/app/models/user.ts","webpack:///./src/app/routes/blockchain.routing.ts"],"names":[],"mappings":"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","file":"lazyloading-blockchain-blockchain-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { BlockchainhomeComponent } from './blockchainhome/blockchainhome.component';\nimport { AddccComponent } from './chaincode/addcc/addcc.component';\nimport { BlockchainRoutingModule } from 'app/routes/blockchain.routing';\nimport { MaterialModule } from 'app/modules/material.module';\nimport { AddMemberComponent } from './ca/add-member/add-member.component';\nimport { InitiateCCComponent } from './chaincode/initiate-cc/initiate-cc.component';\nimport { AddPeerComponent } from './peers/add-peer/add-peer.component';\nimport { ManagechannelsComponent } from './channel/managechannels/managechannels.component';\nimport { AddMembersCertificatesComponent } from './organization/add-members-certificates/add-members-certificates.component';\nimport { AddChannelComponent } from './channel/add-channel/add-channel.component';\nimport { ManageNotificationsComponent } from './notification/manage-notifications/manage-notifications.component';\nimport { AllNotificationsComponent } from './notification/all-notifications/all-notifications.component';\nimport { PendingNotificationsComponent } from './notification/pending-notifications/pending-notifications.component';\nimport { CompletedNotificationsComponent } from './notification/completed-notifications/completed-notifications.component';\n// tslint:disable-next-line: max-line-length\nimport { AddMemberCertificatesDialogComponent } from './organization/add-members-certificates/add-member-certificates-dialog/add-member-certificates-dialog.component';\nimport { ListPeersComponent } from './peers/list-peers/list-peers.component';\nimport { RequestChannelComponent } from './channel/request-channel/request-channel.component';\nimport { InstallChaincodeComponent } from './chaincode/install-chaincode/install-chaincode.component';\nimport { ListChaincodeComponent } from './chaincode/list-chaincode/list-chaincode.component';\nimport { SharedModule } from 'app/shared/shared.module';\nimport { ListMembersComponent } from './ca/list-members/list-members.component';\n\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    BlockchainRoutingModule,\n    SharedModule\n  ],\n  declarations: [\n    BlockchainhomeComponent,\n    ManagechannelsComponent,\n    AddccComponent,\n    AddMemberComponent,\n    AddMembersCertificatesComponent,\n    AddChannelComponent,\n    InitiateCCComponent,\n    AddPeerComponent,\n    ManageNotificationsComponent,\n    AllNotificationsComponent,\n    PendingNotificationsComponent,\n    CompletedNotificationsComponent,\n    AddMemberCertificatesDialogComponent,\n    ListPeersComponent,\n    RequestChannelComponent,\n    InstallChaincodeComponent,\n    ListChaincodeComponent,\n    ListMembersComponent,\n  ],\n  entryComponents: [\n    AddMemberCertificatesDialogComponent,\n    AddChannelComponent,\n    RequestChannelComponent,\n    AddPeerComponent,\n    InstallChaincodeComponent,\n    AddMemberComponent,\n    InitiateCCComponent\n  ]\n})\nexport class BlockchainModule { }\n","module.exports = \"<div class=\\\"main-content\\\">\\n  <div class=\\\"container-fluid\\\">\\n    <div class=\\\"row\\\">\\n      <mat-tab-group>\\n        <mat-tab label=\\\"Members\\\">\\n          <ng-template mat-tab-label>\\n            <mat-icon class=\\\"text-danger example-tab-icon\\\" matTooltip=\\\"Members\\\" class=\\\"text-danger\\\">group</mat-icon>\\n          </ng-template>\\n          <app-list-members></app-list-members>\\n        </mat-tab>\\n        <mat-tab label=\\\"CA\\\">\\n          <ng-template mat-tab-label>\\n            <mat-icon class=\\\"example-tab-icon\\\" matTooltip=\\\"CA\\\" class=\\\"text-danger\\\">card_giftcard</mat-icon>\\n          </ng-template>\\n          <app-add-members-certificates></app-add-members-certificates>\\n        </mat-tab>\\n        <mat-tab label=\\\"Channel\\\">\\n          <ng-template mat-tab-label>\\n            <mat-icon class=\\\"example-tab-icon\\\" matTooltip=\\\"Channels\\\" class=\\\"text-danger\\\">settings_input_component\\n            </mat-icon>\\n          </ng-template>\\n          <app-managechannels></app-managechannels>\\n        </mat-tab>\\n        <mat-tab label=\\\"Notification\\\">\\n          <ng-template mat-tab-label>\\n            <mat-icon class=\\\"example-tab-icon\\\" matTooltip=\\\"Notifications\\\" class=\\\"text-danger\\\">notifications</mat-icon>\\n          </ng-template>\\n          <app-manage-notifications></app-manage-notifications>\\n        </mat-tab>\\n        <mat-tab label=\\\"Chaincode\\\">\\n          <ng-template mat-tab-label>\\n            <mat-icon class=\\\"text-danger example-tab-icon\\\" matTooltip=\\\"Chaincode\\\">dvr</mat-icon>\\n          </ng-template>\\n          <app-list-chaincode></app-list-chaincode>\\n        </mat-tab>\\n        <mat-tab label=\\\"Peers\\\">\\n          <ng-template mat-tab-label>\\n            <mat-icon class=\\\"text-danger example-tab-icon\\\" svgIcon=\\\"lan-pending\\\" matTooltip=\\\"Peers\\\"></mat-icon>\\n          </ng-template>\\n          <app-list-peers></app-list-peers>\\n        </mat-tab>\\n\\n      </mat-tab-group>\\n\\n    </div>\\n  </div>\\n</div>\"","module.exports = \"mat-tab-group {\\n  width: 100%; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MatIconRegistry } from '@angular/material';\n\n@Component({\n  selector: 'app-blockchainhome',\n  templateUrl: './blockchainhome.component.html',\n  styleUrls: ['./blockchainhome.component.scss']\n})\nexport class BlockchainhomeComponent implements OnInit {\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<h1 mat-dialog-title>{{data.title}}</h1>\\n<div mat-dialog-content>\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-body\\\">\\n\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input matInput placeholder=\\\"User Name\\\" [(ngModel)]=\\\"data.username\\\">\\n                    </mat-form-field>\\n                </div>\\n\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field>\\n                        <mat-label>Password</mat-label>\\n                        <input matInput [type]=\\\"hide ? 'password' : 'text'\\\" [(ngModel)]=\\\"data.password\\\">\\n                        <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\" [attr.aria-label]=\\\"'Hide password'\\\"\\n                            [attr.aria-pressed]=\\\"hide\\\">\\n                            <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\n                        </button>\\n                        <mat-icon matPrefix>vpn_key</mat-icon>\\n                    </mat-form-field>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3\\\">\\n                    <mat-form-field>\\n                        <mat-label>Affliation</mat-label>\\n                        <mat-select [(value)]=\\\"data.affliation\\\">\\n                            <mat-option>--</mat-option>\\n                            <mat-option *ngFor=\\\"let affliation of affliations\\\" [value]=\\\"affliation\\\">{{affliation}}\\n                            </mat-option>\\n                        </mat-select>\\n                    </mat-form-field>\\n                </div>\\n                <div class=\\\"col-md-3\\\">\\n                    <mat-form-field>\\n                        <mat-label>Organizations</mat-label>\\n                        <mat-select [(value)]=\\\"data.orgName\\\">\\n                            <mat-option>--</mat-option>\\n                            <mat-option *ngFor=\\\"let organization of organizations\\\" [value]=\\\"organization\\\">\\n                                {{organization}}\\n                            </mat-option>\\n                        </mat-select>\\n                    </mat-form-field>\\n                </div>\\n\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field>\\n                        <mat-label>Type</mat-label>\\n                        <mat-select [(value)]=\\\"data.role\\\">\\n                            <mat-option>--</mat-option>\\n                            <mat-option *ngFor=\\\"let type of types\\\" [value]=\\\"type\\\">{{type}}</mat-option>\\n                        </mat-select>\\n                    </mat-form-field>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field>\\n                        <mat-label>Roles</mat-label>\\n                        <mat-select  [(value)]=\\\"data.attributes\\\" multiple>\\n                            <mat-option *ngFor=\\\"let attribute of attributes\\\" [value]=\\\"attribute\\\">{{attribute}}</mat-option>\\n                        </mat-select>\\n                    </mat-form-field>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div mat-dialog-actions>\\n    <button mat-button class=\\\"btn btn-danger\\\" (click)=\\\"onNoClick()\\\">Cancel</button>\\n    <button mat-button class=\\\"btn btn-danger\\\" (click)=\\\"register()\\\" cdkFocusInitial>Add User</button>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { UserService } from 'app/services/user.service';\nimport { User } from 'app/models/user';\n\nexport interface DialogData {\n  title: string;\n  username: string;\n  password: string;\n  affliation: string;\n  role: string;\n  orgName: string;\n  attributes: Array<string>;\n}\n\n@Component({\n  selector: 'app-add-member',\n  templateUrl: './add-member.component.html',\n  styleUrls: ['./add-member.component.scss']\n})\nexport class AddMemberComponent implements OnInit {\n  hide = true;\n  organizations = ['Org1', 'Org2'];\n  types = ['CLIENT', 'ORDERER', 'PEER', 'USER'];\n  affliations = ['org1.department1', 'ims'];\n  attributes = [\n    'HF REGISTRAR DELEGATE ROLES',\n    'HF REGISTRAR ATTRIBUTES',\n    'HF AFFILIATION MGR',\n    'HF REGISTRAR ROLES',\n    'HFINTERMEDIATECA',\n    'HF REVOKER',\n    'HF GEN CRL'\n  ];\n  constructor(\n    private userService: UserService,\n    public dialogRef: MatDialogRef<AddMemberComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n    data.title = 'Add User'\n  }\n\n  ngOnInit() {\n\n  }\n\n  register() {\n    const user: User = new User();\n    user.username = this.data.username;\n    user.password = this.data.password;\n    user.affiliation = this.data.affliation;\n    user.role = this.data.role;\n    user.orgName = this.data.orgName;\n    user.attributes = this.data.attributes;\n    this.userService.register(user).subscribe(\n      result => {\n        this.onNoClick(result);\n      }\n      ,\n      err => { console.log(err); }\n    )\n  }\n  onNoClick(result): void {\n    this.dialogRef.close(result);\n  }\n\n}\n","module.exports = \"<div class=\\\"col-md-12\\\">\\n    <div class=\\\"col-md-12\\\">\\n        <mat-form-field>\\n            <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Search Member\\\">\\n        </mat-form-field>\\n        <button mat-raised-button class=\\\"btn btn-danger\\\" id=\\\"addUser\\\" (click)=\\\"openAddUserDialog()\\\">\\n            <mat-icon svgIcon=\\\"account-plus-outline\\\"></mat-icon> Add User\\n        </button>\\n    </div>\\n\\n\\n    <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\n\\n        <!-- ID Column -->\\n        <ng-container matColumnDef=\\\"id\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> ID </th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.id}} </td>\\n        </ng-container>\\n \\n        <!-- Type Column -->\\n        <ng-container matColumnDef=\\\"type\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> TYPE </th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.type}} </td>\\n        </ng-container>\\n\\n        <!-- Affiliation Column -->\\n        <ng-container matColumnDef=\\\"affiliation\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> AFFILIATION </th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.affiliation}} </td>\\n        </ng-container>\\n\\n        <!-- Roles Column -->\\n        <ng-container matColumnDef=\\\"attributes\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> ATTRIBUTES </th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                <p *ngFor=\\\"let attr of element.attributes\\\"><b>{{attr.name}}</b>: {{attr.value}}</p>\\n            </td>\\n        </ng-container>\\n\\n        <!-- action Column -->\\n        <ng-container matColumnDef=\\\"action\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> ACTION </th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                <button *ngIf=\\\"element.id == 'admin'\\\" mat-button (click)=\\\"checkClick()\\\">\\n                    <mat-icon matTooltip=\\\"Generate Certificate\\\">input</mat-icon>\\n                </button>\\n            </td>\\n        </ng-container>\\n\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n    </table>\\n\\n</div>\"","module.exports = \"table {\\n  width: 100%; }\\n\\n#addUser {\\n  float: right;\\n  margin-top: 15px; }\\n\\nmat-form-field {\\n  display: inline-block !important; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog, MatTableDataSource, MatSort, MatSnackBarHorizontalPosition, MatSnackBarVerticalPosition, MatSnackBar } from '@angular/material';\nimport { UserService } from 'app/services/user.service';\nimport { AddMemberComponent } from '../add-member/add-member.component';\n\n\nexport interface PeriodicElement {\n  id: string;\n  type: string;\n  affiliation: string;\n  attributes:Array<string>;\n}\n@Component({\n  selector: 'app-list-members',\n  templateUrl: './list-members.component.html',\n  styleUrls: ['./list-members.component.scss']\n})\nexport class ListMembersComponent implements OnInit {\n\n  title: string;\n  name: string;\n  orgName: string;\n  password: string;\n  affliation: string;\n  roles: Array<string>;\n  users: Array<Object> = [];\n  horizontalPosition: MatSnackBarHorizontalPosition = 'center';\n  verticalPosition: MatSnackBarVerticalPosition = 'bottom';\n  displayedColumns: string[] = [\n    'id',\n    'type',\n    'affiliation',\n    'attributes',\n    'action'\n  ];\n  dataSource = new MatTableDataSource();\n\n  @ViewChild(MatSort) sort: MatSort;\n  constructor(\n    public dialog: MatDialog,\n    private snackBar: MatSnackBar,\n    private userService: UserService\n  ) { }\n\n  ngOnInit() {\n    this.dataSource.sort = this.sort;\n    this.getAllUsers();\n  }\n\n  getAllUsers() {\n    this.userService.getAllUsers().subscribe(\n      res => {\n        const response = res.valueOf();\n        if (response['success']) {\n          response['result'].forEach(identity => {\n            this.users.push(\n              {\n                id: identity.id,\n                type: identity.type,\n                attributes: identity.attrs,\n                affiliation: identity.affiliation,\n              }\n            );\n          });\n          this.dataSource.data = this.users;\n          this.dataSource._updateChangeSubscription();\n        } else {\n          this.dataSource.data = [];\n        }\n      },\n      err => { console.log(err); }\n    );\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n \n  openAddUserDialog(): void {\n    const dialogRef = this.dialog.open(AddMemberComponent, {\n      width: '60%',\n      data: {\n        title: this.title,\n        name: this.name,\n        password: this.password,\n        affliation: this.affliation,\n        roles: this.roles,\n        orgName: this.orgName\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log(result);\n      if (result !== 'undefined') {\n        this.openSnackBar(result['message']);\n      }\n    });\n  }\n  openSnackBar(message: string) {\n    this.snackBar.open(message, 'Close', {\n      duration: 5000,\n      horizontalPosition: this.horizontalPosition,\n      verticalPosition: this.verticalPosition,\n    });\n  }\n\n}\n","module.exports = \"<p>\\n  addcc works!\\n</p>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-addcc',\n  templateUrl: './addcc.component.html',\n  styleUrls: ['./addcc.component.scss']\n})\nexport class AddccComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<h1 mat-dialog-title>{{data.cc_title}}</h1>\\n<div mat-dialog-content>\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-body\\\">\\n\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input matInput placeholder=\\\"Chaincode Name\\\" [(ngModel)]=\\\"data.chaincodeName\\\">\\n                    </mat-form-field>\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input matInput placeholder=\\\"Version\\\" [(ngModel)]=\\\"data.chaincodeVersion\\\">\\n                    </mat-form-field>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input matInput placeholder=\\\"Function Name\\\" [(ngModel)]=\\\"data.fcn\\\">\\n                    </mat-form-field>\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input matInput placeholder=\\\"Function Arguments\\\" [(ngModel)]=\\\"data.args\\\">\\n                    </mat-form-field>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field>\\n                        <mat-label>Peers</mat-label>\\n                        <mat-select [formControl]=\\\"peers\\\" [(value)]=\\\"data.peers\\\" multiple>\\n                            <mat-option *ngFor=\\\"let peer of peersList\\\" [value]=\\\"peer\\\">{{peer}}</mat-option>\\n                        </mat-select>\\n                    </mat-form-field>\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field>\\n                        <mat-label>Chaincode Type</mat-label>\\n                        <mat-select [(value)]=\\\"data.chaincodeType\\\">\\n                            <mat-option>--</mat-option>\\n                            <mat-option *ngFor=\\\"let language of languages\\\" [value]=\\\"language\\\">{{language}}</mat-option>\\n                        </mat-select>\\n                    </mat-form-field>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div mat-dialog-actions>\\n    <button mat-button class=\\\"btn btn-danger\\\" (click)=\\\"onNoClick()\\\">Cancel</button>\\n    <button mat-button class=\\\"btn btn-danger\\\" (click)=\\\"initiateChaincode()\\\" cdkFocusInitial>Initiate</button>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { ChaincodeService } from 'app/services/chaincode.service';\nimport { FormControl, Validators } from '@angular/forms';\nimport { InitiateChaincode } from 'app/models/chaincode';\n\nexport interface DialogData {\n  cc_title: string;\n  peers: Array<string>;\n  chaincodeName: string;\n  chaincodeVersion: string;\n  chaincodeType: string;\n  fcn: string;\n  args: Array<string>;\n}\n\n@Component({\n  selector: 'app-initiate-cc',\n  templateUrl: './initiate-cc.component.html',\n  styleUrls: ['./initiate-cc.component.scss']\n})\nexport class InitiateCCComponent implements OnInit {\n  peers = new FormControl('', Validators.required);\n  peersList = ['peer0.org1.example.com', 'peer1.org1.example.com'];\n  languages = ['golang', 'node'];\n  constructor(\n    private chaincodeService: ChaincodeService,\n    public dialogRef: MatDialogRef<InitiateCCComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n    data.cc_title = 'Initiate chaincode';\n    data.fcn = '';\n    data.args = [''];\n  }\n\n  ngOnInit() {\n\n  }\n  initiateChaincode() {\n    const chaincodeConfig: InitiateChaincode = new InitiateChaincode(this.data);\n    this.chaincodeService.initiateChaincode(chaincodeConfig).subscribe(\n      res => {\n        if (res['success']) {\n          this.onNoClick(res['message']);\n        }\n      },\n      err => { this.onNoClick(err) }\n    );\n  }\n  onNoClick(result): void {\n    this.dialogRef.close(result);\n  }\n}\n","module.exports = \"<h1 mat-dialog-title>{{data.title}}</h1>\\n<div mat-dialog-content>\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-body\\\">\\n\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input matInput placeholder=\\\"Chaincode Name\\\" [(ngModel)]=\\\"data.chaincodeName\\\">\\n                    </mat-form-field>\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field>\\n                        <mat-label>Path</mat-label>\\n                        <mat-select [(value)]=\\\"data.chaincodePath\\\">\\n                            <mat-option>--</mat-option>\\n                            <mat-option *ngFor=\\\"let path of paths\\\" [value]=\\\"path\\\">{{path}}</mat-option>\\n                        </mat-select>\\n                    </mat-form-field>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input matInput placeholder=\\\"Chaincode Version\\\" [(ngModel)]=\\\"data.chaincodeVersion\\\">\\n                    </mat-form-field>\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field>\\n                        <mat-label>Chaincode Type</mat-label>\\n                        <mat-select [(value)]=\\\"data.chaincodeType\\\">\\n                            <mat-option>--</mat-option>\\n                            <mat-option *ngFor=\\\"let language of languages\\\" [value]=\\\"language\\\">{{language}}</mat-option>\\n                        </mat-select>\\n                    </mat-form-field>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field>\\n                        <mat-label>Peers</mat-label>\\n                        <mat-select [formControl]=\\\"peers\\\" [(value)]=\\\"data.peers\\\" multiple>\\n                            <mat-option *ngFor=\\\"let peer of peersList\\\" [value]=\\\"peer\\\">{{peer}}</mat-option>\\n                        </mat-select>\\n                    </mat-form-field>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div mat-dialog-actions>\\n    <button mat-button class=\\\"btn btn-danger\\\" (click)=\\\"onNoClick()\\\">Cancel</button>\\n    <button mat-button class=\\\"btn btn-danger\\\" (click)=\\\"installChaincode()\\\" cdkFocusInitial>Install</button>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { ChaincodeService } from 'app/services/chaincode.service';\nimport { FormControl, Validators } from '@angular/forms';\nimport { InstallChaincode } from 'app/models/chaincode';\n\nexport interface DialogData {\n  title: string;\n  peers: Array<string>;\n  chaincodeName: string;\n  chaincodeVersion: string;\n  chaincodePath: string;\n  chaincodeType: string;\n}\n\n@Component({\n  selector: 'app-install-chaincode',\n  templateUrl: './install-chaincode.component.html',\n  styleUrls: ['./install-chaincode.component.scss']\n})\nexport class InstallChaincodeComponent implements OnInit {\n  peers = new FormControl('', Validators.required); \n  languages = ['golang', 'node'];\n  peersList = ['peer0.org1.example.com', 'peer1.org1.example.com'];\n  paths: Array<string>;\n  chaincodeFilesObj = {};\n  constructor(\n    private chaincodeService: ChaincodeService,\n    public dialogRef: MatDialogRef<InstallChaincodeComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n    data.title = 'Install chaincode'\n  }\n\n  ngOnInit() {\n    this.chaincodeService.getChaincodeFiles().subscribe(\n      res => {\n        this.chaincodeFilesObj = res;\n        this.paths = Object.keys(res);\n      }\n    );\n  }\n\n  installChaincode() {\n    this.data.chaincodePath = this.chaincodeFilesObj[this.data.chaincodePath];\n    const chaincodeConfig: InstallChaincode = new InstallChaincode(this.data);\n    this.chaincodeService.installChaincode(chaincodeConfig).subscribe(\n      res => {\n        this.onNoClick(res);\n      },\n      err => { console.log(err); }\n    );\n  }\n  onNoClick(result): void {\n      this.dialogRef.close(result);\n  }\n\n}\n","module.exports = \"<div class=\\\"col-md-12\\\">\\n  <div class=\\\"col-md-12\\\">\\n    <mat-form-field>\\n      <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Search Chaincode\\\">\\n    </mat-form-field>\\n    <button mat-raised-button class=\\\"btn btn-danger\\\" id=\\\"installCC\\\" (click)=\\\"listChaincode()\\\">\\n      <mat-icon svgIcon=\\\"cogs\\\"></mat-icon> Refresh\\n    </button>\\n    <button mat-raised-button class=\\\"btn btn-danger\\\" id=\\\"installCC\\\" (click)=\\\"openInstallChaincodeDialog()\\\">\\n      <mat-icon svgIcon=\\\"cogs\\\"></mat-icon> Install Chaincode\\n    </button>\\n  </div>\\n\\n\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\n\\n    <!-- ID Column -->\\n    <ng-container matColumnDef=\\\"id\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> CODE ID </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n    </ng-container>\\n\\n    <!-- Version Column -->\\n    <ng-container matColumnDef=\\\"version\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> VERSION </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.version}} </td>\\n    </ng-container>\\n\\n    <!-- Status Column -->\\n    <ng-container matColumnDef=\\\"status\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> STATUS </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.status}} </td>\\n    </ng-container>\\n\\n    <!-- action Column -->\\n    <ng-container matColumnDef=\\\"action\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ACTION </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\" aria-label=\\\"Actions For Chaincode\\\">\\n          <mat-icon>more_vert</mat-icon>\\n        </button>\\n        <mat-menu #menu=\\\"matMenu\\\">\\n          <button mat-menu-item *ngIf=\\\"element.status == 'Installed'\\\"\\n            (click)=\\\"openInitiateChaincodeDialog(element.name,element.version)\\\">\\n            <mat-icon svgIcon=\\\"rotate-3d\\\"></mat-icon>\\n            <span>Initiate</span>\\n          </button>\\n        </mat-menu>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n\\n</div>\"","module.exports = \"table {\\n  width: 100%; }\\n\\n#installCC {\\n  float: right;\\n  margin-top: 15px; }\\n\\nmat-form-field {\\n  display: inline-block !important; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTableDataSource, MatSort, MatDialog, MatSnackBarHorizontalPosition, MatSnackBarVerticalPosition, MatSnackBar } from '@angular/material';\nimport { InstallChaincodeComponent } from '../install-chaincode/install-chaincode.component';\nimport { InitiateCCComponent } from '../initiate-cc/initiate-cc.component';\nimport { PeerService } from 'app/services/peer.service';\nimport { ChaincodeService } from 'app/services/chaincode.service';\n\n\n@Component({\n  selector: 'app-list-chaincode',\n  templateUrl: './list-chaincode.component.html',\n  styleUrls: ['./list-chaincode.component.scss']\n})\nexport class ListChaincodeComponent implements OnInit {\n\n  title: string;\n  name: string;\n  version: string;\n  languageType: string;\n  choosedFiles: string;\n  selectedPath: string;\n  // Initiate dialog box variables\n  cc_title: string;\n  peers: Array<string>;\n  chaincodeName: string;\n  chaincodeVersion: string;\n  fcn: string;\n  args: Array<string>;\n\n  selected: any;\n  displayedColumns: string[] = [\n    'id',\n    'version',\n    'status',\n    'action'\n  ];\n\n  listPeers: Array<string> = [];\n\n  horizontalPosition: MatSnackBarHorizontalPosition = 'center';\n  verticalPosition: MatSnackBarVerticalPosition = 'bottom';\n  dataSource = new MatTableDataSource();\n  @ViewChild(MatSort) sort: MatSort;\n  constructor(\n    private peerService: PeerService,\n    private chaincodeService: ChaincodeService,\n    public dialog: MatDialog,\n    private snackBar: MatSnackBar\n  ) { }\n  ngOnInit() {\n    this.dataSource.sort = this.sort;\n    this.loadPeers();\n    this.listChaincode();\n  }\n\n  loadPeers() {\n    this.peerService.getPeers().subscribe(\n      res => {\n        res.forEach(peer => {\n          this.listPeers.push(peer.name);\n        });\n      },\n      err => { console.log(err); }\n    );\n  }\n\n  listChaincode() {\n    this.chaincodeService.listChaincodes().subscribe(\n      res => {\n        const initiated = res.initiated;\n        const installed = res.installed;\n        const chaincodes = installed.concat(initiated);\n        this.dataSource.data = chaincodes;\n        this.dataSource._updateChangeSubscription();\n      },\n      err => { console.log(err); }\n    );\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  openInstallChaincodeDialog(): void {\n    const dialogRef = this.dialog.open(InstallChaincodeComponent, {\n      width: '80%',\n      data: {\n        title: this.title,\n        chaincodeName: this.name,\n        chaincodeVersion: this.version,\n        chaincodeType: this.languageType,\n        chaincodePath: this.selectedPath\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (typeof result !== 'undefined') {\n        this.openSnackBar(result.message);\n      }\n    });\n  }\n\n  openInitiateChaincodeDialog(CCname: string, CCversion: string): void {\n    const dialogRef = this.dialog.open(InitiateCCComponent, {\n      width: '50%',\n      data: {\n        cc_title: this.cc_title,\n        peers: this.peers,\n        chaincodeName: CCname,\n        chaincodeVersion: CCversion,\n        fcn: this.fcn,\n        args: this.args\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (typeof result !== 'undefined') {\n        this.openSnackBar(result);\n      }\n    });\n  }\n\n  openSnackBar(message: string) {\n    this.snackBar.open(message, 'Close', {\n      duration: 5000,\n      horizontalPosition: this.horizontalPosition,\n      verticalPosition: this.verticalPosition,\n    });\n  }\n\n}\n","module.exports = \"<h1 mat-dialog-title>{{data.title}}</h1>\\n<div mat-dialog-content>\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-body\\\">\\n\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input matInput placeholder=\\\"Channel Name\\\" [(ngModel)]=\\\"data.channelName\\\">\\n                    </mat-form-field>\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field>\\n                        <mat-label>Channel File</mat-label>\\n                        <mat-select [(value)]=\\\"data.channelFile\\\">\\n                            <mat-option>--</mat-option>\\n                            <mat-option *ngFor=\\\"let channel of channels\\\" [value]=\\\"channel\\\">{{channel}}</mat-option>\\n                        </mat-select>\\n                    </mat-form-field>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div mat-dialog-actions>\\n    <button mat-button class=\\\"btn btn-danger\\\" (click)=\\\"onNoClick()\\\">Cancel</button>\\n    <button mat-button class=\\\"btn btn-danger\\\" (click)=\\\"addChannel()\\\" cdkFocusInitial>Submit</button>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { ManagechannelsComponent } from '../managechannels/managechannels.component';\nimport { ChannelService } from 'app/services/channel.service';\n\nexport interface DialogData {\n  title: string;\n  channelName: string;\n  channelFile: string;\n}\n\n@Component({\n  selector: 'app-add-channel',\n  templateUrl: './add-channel.component.html',\n  styleUrls: ['./add-channel.component.scss']\n})\nexport class AddChannelComponent implements OnInit {\n\n  channels: any;\n  ngOnInit() {\n    this.channelService.getChannelFiles().subscribe(\n      res => {\n        this.channels = res;\n      }\n    );\n  }\n\n  constructor(\n    private channelService: ChannelService,\n    public dialogRef: MatDialogRef<ManagechannelsComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n    data.title = 'Add Channel';\n  }\n\n  addChannel() {\n    this.channelService.setCurrentChannel(this.data.channelName);\n    let channelDetails = {\n      channelName: this.data.channelName,\n      channelFile: this.data.channelFile\n    };\n    this.channelService.addChannel(channelDetails).subscribe(\n      res => {\n          this.onNoClick(res);\n      },\n      err => {\n        this.onNoClick('fail');\n      }\n    );\n  }\n\n  onNoClick(result): void {\n    this.dialogRef.close(result);\n  }\n\n}\n\n","module.exports = \"<div class=\\\"col-md-12\\\">\\n  <div class=\\\"col-md-12\\\">\\n    <mat-form-field>\\n      <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Search Channel\\\">\\n    </mat-form-field>\\n    <button mat-raised-button class=\\\"btn btn-danger\\\" id=\\\"addChannel\\\" (click)=\\\"getChannelInfo()\\\">\\n      <mat-icon svgIcon=\\\"account-clock\\\"></mat-icon> Refresh</button>\\n    <button mat-raised-button class=\\\"btn btn-danger\\\" id=\\\"addChannel\\\" (click)=\\\"openDialog()\\\">\\n      <mat-icon svgIcon=\\\"account-clock\\\"></mat-icon> Add Channel</button>\\n  </div>\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\n\\n    <!-- ID Column -->\\n    <ng-container matColumnDef=\\\"id\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ID </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n    </ng-container>\\n\\n    <!-- Block HeightColumn -->\\n    <ng-container matColumnDef=\\\"blockHeight\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> BLOCK HEIGHT </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.height}} </td>\\n    </ng-container>\\n\\n    <!-- Peers Column -->\\n    <ng-container matColumnDef=\\\"peers\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> PEERS </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.peers}} </td>\\n    </ng-container>\\n\\n    <!-- action Column -->\\n    <ng-container matColumnDef=\\\"action\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ACTION </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\" aria-label=\\\"Actions For Chaincode\\\">\\n          <mat-icon>more_vert</mat-icon>\\n        </button>\\n        <mat-menu #menu=\\\"matMenu\\\">\\n          <button mat-menu-item>\\n            <mat-icon svgIcon=\\\"square-edit-outline\\\"></mat-icon>\\n            <span>Edit Channel</span>\\n          </button>\\n        </mat-menu>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n\\n</div>\"","module.exports = \"table {\\n  width: 100%; }\\n\\n#addChannel {\\n  float: right;\\n  margin-top: 15px; }\\n\\nmat-form-field {\\n  display: inline-block !important; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport {\n  MatTableDataSource,\n  MatSort,\n  MatSnackBarHorizontalPosition,\n  MatSnackBarVerticalPosition,\n  MatSnackBar,\n  MatDialog\n} from '@angular/material';\nimport { AddChannelComponent } from '../add-channel/add-channel.component';\nimport { RequestChannelComponent } from '../request-channel/request-channel.component';\nimport { ChannelService } from 'app/services/channel.service';\n\n@Component({\n  selector: 'app-managechannels',\n  templateUrl: './managechannels.component.html',\n  styleUrls: ['./managechannels.component.scss']\n})\nexport class ManagechannelsComponent implements OnInit {\n\n  displayedColumns: string[] = [\n    'id',\n    'blockHeight',\n    'peers',\n    'action'\n  ];\n  dataSource = new MatTableDataSource();\n  title: string;\n  channelName: string;\n  channelFile: string;\n  peers: Array<string>;\n  horizontalPosition: MatSnackBarHorizontalPosition = 'center';\n  verticalPosition: MatSnackBarVerticalPosition = 'bottom';\n\n  constructor(\n    private channelService: ChannelService,\n    public dialog: MatDialog,\n    private snackBar: MatSnackBar\n  ) { }\n\n\n\n  @ViewChild(MatSort) sort: MatSort;\n\n  ngOnInit() {\n    this.dataSource.sort = this.sort;\n    this.getChannelInfo()\n  }\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  getChannelInfo() {\n    this.channelService.getChannelInfo().subscribe(\n      res => {\n        this.dataSource.data = res;\n        this.dataSource._updateChangeSubscription();\n      },\n      err => {\n        console.log(err);\n      }\n    );\n  }\n\n  openDialog(): void {\n    const dialogRef = this.dialog.open(AddChannelComponent, {\n      width: '50%',\n      data: {\n        title: this.title,\n        channelName: this.channelName,\n        channelFile: this.channelFile\n\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result.message) {\n        this.openSnackBar(result.message);\n      } else if (result === 'fail') {\n        this.openSnackBar('Unhandled exception might be occured');\n      }\n\n    });\n  }\n\n  openDialogRequestChannel(): void {\n    const dialogRef = this.dialog.open(RequestChannelComponent, {\n      width: '50%',\n      data: {\n        title: this.title,\n        channelName: this.channelName,\n        peers: this.peers\n\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      this.openSnackBar(result);\n    });\n  }\n\n\n\n  openSnackBar(message: string) {\n    this.snackBar.open(message, 'Close', {\n      duration: 1000,\n      horizontalPosition: this.horizontalPosition,\n      verticalPosition: this.verticalPosition,\n    });\n  }\n\n}\n","module.exports = \"<h1 mat-dialog-title>{{data.title}}</h1>\\n<div mat-dialog-content>\\n  <div class=\\\"card\\\">\\n    <div class=\\\"card-body\\\">\\n\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n            <mat-form-field>\\n                <mat-label>Channel Name</mat-label>\\n                <mat-select [(value)]=\\\"data.channelName\\\">\\n                  <mat-option>--</mat-option>\\n                  <mat-option *ngFor=\\\"let channel of channels\\\" [value]=\\\"channel\\\">{{channel}}</mat-option>\\n                </mat-select>\\n              </mat-form-field>\\n        </div>\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field>\\n            <mat-label>Peers</mat-label>\\n            <mat-select [formControl]=\\\"peers\\\" [(value)]= \\\"data.peers\\\" multiple>\\n              <mat-option *ngFor=\\\"let peer of peersList\\\" [value]=\\\"peer\\\">{{peer}}</mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n<div mat-dialog-actions>\\n  <button mat-button class=\\\"btn btn-danger\\\" (click)=\\\"onNoClick()\\\">Cancel</button>\\n  <button mat-button class=\\\"btn btn-danger\\\" [mat-dialog-close]=\\\"data\\\" cdkFocusInitial>Submit</button>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { ManagechannelsComponent } from '../managechannels/managechannels.component';\nimport { FormControl, Validators } from '@angular/forms';\n\nexport interface DialogData {\n  title: string;\n  channelName: string;\n  peers: Array<string>;\n}\n@Component({\n  selector: 'app-request-channel',\n  templateUrl: './request-channel.component.html',\n  styleUrls: ['./request-channel.component.scss']\n})\nexport class RequestChannelComponent implements OnInit {\n  peers = new FormControl('',Validators.required);\n  channels = ['channel1', 'channel2'];\n  peersList = ['localhost:9001', 'localhost:9002'];\n  ngOnInit() {\n  }\n  constructor(\n    public dialogRef: MatDialogRef<ManagechannelsComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n    data.title = 'Request For Joining Channel';\n  }\n\n\n  onNoClick(): void {\n    this.dialogRef.close();\n    console.log(this.peers);\n  }\n\n}\n","module.exports = \"<div class=\\\"col-md-12 full-width\\\">\\n  <div class=\\\"col-md-12\\\">\\n    <mat-form-field>\\n      <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Search Notifications\\\">\\n    </mat-form-field>\\n\\n  </div>\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\n\\n    <!-- NAME Column -->\\n    <ng-container matColumnDef=\\\"name\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> NAME </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <span class=\\\"name\\\">{{element.title}}</span>\\n        <p class=\\\"message\\\">\\n          username: {{element.username}}\\n        </p>\\n      </td>\\n    </ng-container>\\n\\n    <!-- Time Updated Column -->\\n    <ng-container matColumnDef=\\\"time\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> TIME REQUESTED </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <span class=\\\"name\\\">username: {{element.username}}</span>\\n        <p class=\\\"message\\\">\\n          {{element.date}}\\n        </p>\\n      </td>\\n    </ng-container>\\n\\n    <!-- Block Status -->\\n    <ng-container matColumnDef=\\\"status\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> STATUS </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"name\\\">\\n        <i class=\\\"fa fa-circle text-danger\\\"></i>\\n        {{element.status}} </td>\\n    </ng-container>\\n\\n    <!-- action Column -->\\n    <ng-container matColumnDef=\\\"action\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ACTION </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <button mat-icon-button color='primary' (click)=\\\"approveRequest({title:element.title,username:element.username})\\\" matTooltip=\\\"Approve\\\"\\n        *ngIf='element.status == \\\"pending\\\" ||  element.status == \\\"reject\\\" '>\\n          <mat-icon>done</mat-icon>\\n        </button>\\n        <button mat-icon-button color='warn' (click)=\\\"rejectRequest(element.username)\\\" matTooltip=\\\"Reject\\\"\\n          *ngIf='element.status == \\\"pending\\\" || element.status == \\\"approve\\\" '>\\n          <mat-icon>clear</mat-icon>\\n        </button>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n\\n</div>\"","module.exports = \"table {\\n  width: 100%; }\\n\\n.name {\\n  font-weight: 600;\\n  font-family: serif; }\\n\\n.message {\\n  font-size: 12px;\\n  font-family: serif; }\\n\\n.full-width {\\n  width: 100%; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTableDataSource, MatSort, MatSnackBarHorizontalPosition, MatSnackBarVerticalPosition, MatSnackBar } from '@angular/material';\nimport { CertificateService } from 'app/services/certificate.service';\n\n@Component({\n  selector: 'app-all-notifications',\n  templateUrl: './all-notifications.component.html',\n  styleUrls: ['./all-notifications.component.scss']\n})\nexport class AllNotificationsComponent implements OnInit {\n  displayedColumns: string[] = [\n    'name',\n    'time',\n    'status',\n    'action'\n  ];\n  horizontalPosition: MatSnackBarHorizontalPosition = 'center';\n  verticalPosition: MatSnackBarVerticalPosition = 'bottom';\n  dataSource = new MatTableDataSource();\n  @ViewChild(MatSort) sort: MatSort;\n  constructor(\n    private snackBar: MatSnackBar,\n    private certificateService: CertificateService\n  ) { }\n  ngOnInit() {\n    this.dataSource.sort = this.sort;\n    this.getAllCertificates();\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  approveRequest(data) {\n    if (data.title === 'Birth Certificate') {\n      this.addBirth(data);\n    }\n    if (data.title === 'National ID') {\n      this.addNational(data);\n    }\n    if (data.title === 'Marriage Certificate') {\n      this.addMarriage(data);\n    }\n  }\n\n  rejectRequest(username: string) {\n    this.certificateService.rejectBirthRequest({ username: username }).subscribe(\n      res => { console.log(res); },\n      err => { console.log(err); }\n    );\n  }\n\n  addBirth(data) {\n    this.certificateService.approveBirthRequest(data).subscribe(\n      res => {\n        if (res['success']) {\n          this.certificateService.getFromMongo({ path: 'birth', id: res['docs']._id }).subscribe(\n            response => {\n              if (response['success']) {\n                this.openSnackBar(response['msg']);\n              }\n              const birthData = response['docs'].info;\n              this.certificateService.addBirth(birthData).subscribe(\n                finalResponse => {\n                  if (finalResponse['success']) {\n                    this.openSnackBar('Transaction successfully executed');\n                  }\n                },\n                finalError => { console.log(finalError) }\n              );\n            },\n            error => { console.log(error) }\n          );\n        }\n      },\n      err => { console.log(err); }\n    );\n  }\n\n  addNational(data) {\n    this.certificateService.approvenationalRequest(data).subscribe(\n      res => {\n        if (res['success']) {\n          this.certificateService.getFromMongo({ path: 'nationalid', id: res['docs']._id }).subscribe(\n            response => {\n              if (response['success']) {\n                this.openSnackBar(response['msg']);\n              }\n              const nationalData = response['docs'];\n              console.log(nationalData);\n              this.certificateService.addNationalId(nationalData).subscribe(\n                finalResponse => {\n                  if (finalResponse['success']) {\n                    this.openSnackBar('Transaction successfully executed');\n                  }\n                },\n                finalError => { console.log(finalError) }\n              );\n            },\n            error => { console.log(error) }\n          );\n        }\n      },\n      err => { console.log(err); }\n    );\n  }\n\n  addMarriage(data) {\n    this.certificateService.approvemarriageRequest(data).subscribe(\n      res => {\n        if (res['success']) {\n          this.certificateService.getFromMongo({ path: 'marriage', id: res['docs']._id }).subscribe(\n            response => {\n              if (response['success']) {\n                this.openSnackBar(response['msg']);\n              }\n              const marriageData = response['docs'];\n              this.certificateService.addMarriage(marriageData.info).subscribe(\n                finalResponse => {\n                  if (finalResponse['success']) {\n                    this.openSnackBar('Transaction successfully executed');\n                  }\n                },\n                finalError => { console.log(finalError) }\n              );\n            },\n            error => { console.log(error) }\n          );\n        }\n      },\n      err => { console.log(err); }\n    );\n  }\n\n\n  getAllCertificates() {\n    this.certificateService.getBirthAll().subscribe(\n      res => {\n        this.dataSource.data = res.docs;\n        this.dataSource._updateChangeSubscription();\n      },\n      err => { console.log(err); }\n    );\n    this.certificateService.getNationAll().subscribe(\n      resp => {\n        this.dataSource.data = this.dataSource.data.concat(...resp.docs);\n        this.dataSource._updateChangeSubscription();\n      },\n      err => { console.log(err); }\n    );\n    this.certificateService.getMarriageAll().subscribe(\n      response => {\n        this.dataSource.data = this.dataSource.data.concat(...response.docs);\n        this.dataSource._updateChangeSubscription();\n      },\n      err => { console.log(err); }\n    );\n  }\n\n  openSnackBar(message: string) {\n    this.snackBar.open(message, 'Close', {\n      duration: 1000,\n      horizontalPosition: this.horizontalPosition,\n      verticalPosition: this.verticalPosition,\n    });\n  }\n}\n","module.exports = \"<div class=\\\"col-md-12\\\">\\n  <div class=\\\"col-md-12\\\">\\n    <mat-form-field>\\n      <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Search Notifications\\\">\\n    </mat-form-field>\\n\\n  </div>\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\n\\n    <!-- NAME Column -->\\n    <ng-container matColumnDef=\\\"name\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> NAME </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <span class=\\\"name\\\">{{element.title}}</span>\\n        <p class=\\\"message\\\">\\n          username: {{element.username}}\\n        </p>\\n      </td>\\n    </ng-container>\\n\\n    <!-- Time Updated Column -->\\n    <ng-container matColumnDef=\\\"time\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> TIME REQUESTED </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <span class=\\\"name\\\">username: {{element.username}}</span>\\n        <p class=\\\"message\\\">\\n          {{element.date}}\\n        </p>\\n      </td>\\n    </ng-container>\\n \\n    <!-- Block Status -->\\n    <ng-container matColumnDef=\\\"status\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> STATUS </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"name\\\">\\n        <i class=\\\"fa fa-circle text-danger\\\"></i>\\n        {{element.status}} </td>\\n    </ng-container>\\n\\n    <!-- action Column -->\\n    <ng-container matColumnDef=\\\"action\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ACTION </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <button mat-icon-button color='primary' (click)=\\\"approveRequest(element.username)\\\" matTooltip=\\\"Approve\\\"\\n        *ngIf='element.status == \\\"pending\\\" ||  element.status == \\\"reject\\\" '>\\n          <mat-icon>done</mat-icon>\\n        </button>\\n        <button mat-icon-button color='warn' (click)=\\\"rejectRequest(element.username)\\\" matTooltip=\\\"Reject\\\"\\n          *ngIf='element.status == \\\"pending\\\" || element.status == \\\"approve\\\" '>\\n          <mat-icon>clear</mat-icon>\\n        </button>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n\\n</div>\"","module.exports = \"table {\\n  width: 100%; }\\n\\n.name {\\n  font-weight: 600;\\n  font-family: serif; }\\n\\n.message {\\n  font-size: 12px;\\n  font-family: serif; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTableDataSource, MatSort } from '@angular/material';\nimport { CertificateService } from 'app/services/certificate.service';\n\n@Component({\n  selector: 'app-completed-notifications',\n  templateUrl: './completed-notifications.component.html',\n  styleUrls: ['./completed-notifications.component.scss']\n})\nexport class CompletedNotificationsComponent implements OnInit {\n  displayedColumns: string[] = [\n    'name',\n    'time',\n    'status',\n    'action'\n  ];\n  dataSource = new MatTableDataSource();\n  @ViewChild(MatSort) sort: MatSort;\n  constructor(\n    private certificateService: CertificateService\n  ) { }\n  ngOnInit() {\n    this.dataSource.sort = this.sort;\n    this.getAllCertificates();\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  approveRequest(username: string) {\n    this.certificateService.approveBirthRequest({ username: username }).subscribe(\n      res => { console.log(res); },\n      err => { console.log(err); }\n    );\n  }\n\n  rejectRequest(username: string) {\n    this.certificateService.rejectBirthRequest({ username: username }).subscribe(\n      res => { console.log(res); },\n      err => { console.log(err); }\n    );\n  }\n\n  getAllCertificates() {\n\n    this.certificateService.getBirthAll().subscribe(\n      res => {\n        this.dataSource.data = res['docs'].filter((doc) => {\n          if (doc.status === 'approve') {\n            return doc;\n          }\n        });\n        this.dataSource._updateChangeSubscription();\n      },\n      err => { console.log(err); }\n    );\n\n\n    this.certificateService.getNationAll().subscribe(\n      resp => {\n        const filtered = resp.docs.filter((doc) => {\n          if (doc.status === 'approve') {\n            return doc;\n          }\n          console.log(doc)\n        });\n        this.dataSource.data = this.dataSource.data.concat(filtered);\n        this.dataSource._updateChangeSubscription();\n      },\n      err => { console.log(err); }\n    );\n\n\n    this.certificateService.getMarriageAll().subscribe(\n      response => {\n        const filtered = response.docs.filter((doc) => {\n          if (doc.status === 'approve') {\n            return doc;\n          }\n        });\n        this.dataSource.data = this.dataSource.data.concat(filtered);\n        this.dataSource._updateChangeSubscription();\n      },\n      err => { console.log(err); }\n    );\n  }\n}\n","module.exports = \"<mat-tab-group>\\n    <mat-tab>\\n      <ng-template mat-tab-label>\\n        <b class=\\\"text-danger\\\">All</b>\\n      </ng-template>\\n      <app-all-notifications></app-all-notifications>\\n    </mat-tab>\\n  \\n    <mat-tab>\\n      <ng-template mat-tab-label>\\n        <b class=\\\"text-danger\\\">Pending</b>\\n      </ng-template>\\n      <app-pending-notifications></app-pending-notifications>\\n    </mat-tab>\\n\\n    <mat-tab>\\n        <ng-template mat-tab-label>\\n          <b class=\\\"text-danger\\\">Approved</b>\\n        </ng-template>\\n        <app-completed-notifications></app-completed-notifications>\\n      </mat-tab>\\n  </mat-tab-group>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-manage-notifications',\n  templateUrl: './manage-notifications.component.html',\n  styleUrls: ['./manage-notifications.component.scss']\n})\nexport class ManageNotificationsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<div class=\\\"col-md-12\\\">\\n  <div class=\\\"col-md-12\\\">\\n    <mat-form-field>\\n      <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Search Notifications\\\">\\n    </mat-form-field>\\n\\n  </div>\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\n\\n    <!-- NAME Column -->\\n    <ng-container matColumnDef=\\\"name\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> NAME </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <span class=\\\"name\\\">{{element.title}}</span>\\n        <p class=\\\"message\\\">\\n          username: {{element.username}}\\n        </p>\\n      </td>\\n    </ng-container>\\n\\n    <!-- Time Updated Column -->\\n    <ng-container matColumnDef=\\\"time\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> TIME REQUESTED </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <span class=\\\"name\\\">username: {{element.username}}</span>\\n        <p class=\\\"message\\\">\\n          {{element.date}}\\n        </p>\\n      </td>\\n    </ng-container>\\n\\n    <!-- Block Status -->\\n    <ng-container matColumnDef=\\\"status\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> STATUS </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"name\\\">\\n        <i class=\\\"fa fa-circle text-danger\\\"></i>\\n        {{element.status}} </td>\\n    </ng-container>\\n\\n    <!-- action Column -->\\n    <ng-container matColumnDef=\\\"action\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ACTION </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <button mat-icon-button color='primary' (click)=\\\"approveRequest(element.username)\\\" matTooltip=\\\"Approve\\\"\\n        *ngIf='element.status == \\\"pending\\\" ||  element.status == \\\"reject\\\" '>\\n          <mat-icon>done</mat-icon>\\n        </button>\\n        <button mat-icon-button color='warn' (click)=\\\"rejectRequest(element.username)\\\" matTooltip=\\\"Reject\\\"\\n          *ngIf='element.status == \\\"pending\\\" || element.status == \\\"approve\\\" '>\\n          <mat-icon>clear</mat-icon>\\n        </button>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n\\n</div>\"","module.exports = \"table {\\n  width: 100%; }\\n\\n.name {\\n  font-weight: 600;\\n  font-family: serif; }\\n\\n.message {\\n  font-size: 12px;\\n  font-family: serif; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTableDataSource, MatSort } from '@angular/material';\nimport { CertificateService } from 'app/services/certificate.service';\n\n@Component({\n  selector: 'app-pending-notifications',\n  templateUrl: './pending-notifications.component.html',\n  styleUrls: ['./pending-notifications.component.scss']\n})\nexport class PendingNotificationsComponent implements OnInit {\n  displayedColumns: string[] = [\n    'name',\n    'time',\n    'status',\n    'action'\n  ];\n  dataSource = new MatTableDataSource();\n  @ViewChild(MatSort) sort: MatSort;\n  constructor(\n    private certificateService: CertificateService\n  ) { }\n  ngOnInit() {\n    this.dataSource.sort = this.sort;\n    this.getAllCertificates();\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  approveRequest(username: string) {\n    this.certificateService.approveBirthRequest({ username: username }).subscribe(\n      res => { console.log(res); },\n      err => { console.log(err); }\n    );\n  }\n\n  rejectRequest(username: string) {\n    this.certificateService.rejectBirthRequest({ username: username }).subscribe(\n      res => { console.log(res); },\n      err => { console.log(err); }\n    );\n  }\n\n  getAllCertificates() {\n\n    this.certificateService.getBirthAll().subscribe(\n      res => {\n        this.dataSource.data = res['docs'].filter((doc) => {\n          if (doc.status === 'pending') {\n            return doc;\n          }\n        });\n        this.dataSource._updateChangeSubscription();\n      },\n      err => { console.log(err); }\n    );\n\n\n    this.certificateService.getNationAll().subscribe(\n      resp => {\n        const filtered = resp.docs.filter((doc) => {\n          if (doc.status === 'pending') {\n            return doc;\n          }\n        });\n        this.dataSource.data = this.dataSource.data.concat(filtered);\n        this.dataSource._updateChangeSubscription();\n      },\n      err => { console.log(err); }\n    );\n\n\n    this.certificateService.getMarriageAll().subscribe(\n      response => {\n        const filtered = response.docs.filter((doc) => {\n          if (doc.status === 'pending') {\n            return doc;\n          }\n        });\n        this.dataSource.data = this.dataSource.data.concat(filtered);\n        this.dataSource._updateChangeSubscription();\n      },\n      err => { console.log(err); }\n    );\n  }\n}\n","module.exports = \"<h1 mat-dialog-title>{{data.title}}</h1>\\n<div mat-dialog-content>\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-body\\\">\\n\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input matInput placeholder=\\\"Name\\\" [(ngModel)]=\\\"data.name\\\">\\n                    </mat-form-field>\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input matInput placeholder=\\\"Certificate\\\" [(ngModel)]=\\\"data.certificate\\\">\\n                    </mat-form-field>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div mat-dialog-actions>\\n    <button mat-button class=\\\"btn btn-danger\\\" (click)=\\\"onNoClick()\\\">Cancel</button>\\n    <button mat-button class=\\\"btn btn-danger\\\" [mat-dialog-close]=\\\"data\\\" cdkFocusInitial>Submit</button>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { AddMembersCertificatesComponent } from '../add-members-certificates.component';\n\nexport interface DialogData {\n  title: string;\n  name: string;\n  certificate:string;\n}\n\n@Component({\n  selector: 'app-add-member-certificates-dialog',\n  templateUrl: './add-member-certificates-dialog.component.html',\n  styleUrls: ['./add-member-certificates-dialog.component.scss']\n})\nexport class AddMemberCertificatesDialogComponent implements OnInit {\n\n  ngOnInit() {\n  } \n  \n  constructor(\n    public dialogRef: MatDialogRef<AddMembersCertificatesComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n      data.title ='Add Certificate' \n     }\n     \n    \n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n","module.exports = \"<div class=\\\"col-md-12\\\">\\n  <div class=\\\"col-md-12\\\">\\n    <mat-form-field>\\n      <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Search Certificate\\\">\\n    </mat-form-field>\\n    <button mat-raised-button class=\\\"btn btn-danger\\\" id=\\\"addMember\\\" (click)=\\\"openDialog()\\\"><mat-icon>add_circle_outline</mat-icon> Add\\n      Certificate</button>\\n  </div>\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\n\\n    <!-- ID Column -->\\n    <ng-container matColumnDef=\\\"id\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ID </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.id}} </td>\\n  </ng-container>\\n\\n  <!-- Type Column -->\\n  <ng-container matColumnDef=\\\"type\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> TYPE </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.type}} </td>\\n  </ng-container>\\n\\n  <!-- Affiliation Column -->\\n  <ng-container matColumnDef=\\\"affiliation\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> AFFILIATION </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.affiliation}} </td>\\n  </ng-container>\\n\\n    <!-- action Column -->\\n    <ng-container matColumnDef=\\\"action\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ACTION </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n          <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\" aria-label=\\\"Actions For Certificate\\\">\\n              <mat-icon>more_vert</mat-icon>\\n            </button>\\n            <mat-menu #menu=\\\"matMenu\\\">\\n              <button mat-menu-item (click)=\\\"openSnackBarCertificate()\\\" >\\n                <mat-icon svgIcon=\\\"square-edit-outline\\\"></mat-icon>\\n                <span>Revok</span>\\n              </button>\\n              <button mat-menu-item (click)=\\\"openSnackBarSyncCertificate()\\\">\\n                <mat-icon svgIcon=\\\"sync\\\"></mat-icon>\\n                <span>Reenroll</span>\\n              </button>\\n            </mat-menu>\\n        </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n\\n</div>\"","module.exports = \"table {\\n  width: 100%; }\\n\\n#addMember {\\n  float: right;\\n  margin-top: 15px; }\\n\\nmat-form-field {\\n  display: inline-block !important; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\n// tslint:disable-next-line: max-line-length\nimport { MatTableDataSource, MatSort, MatDialog, MatSnackBarHorizontalPosition, MatSnackBarVerticalPosition, MatSnackBar } from '@angular/material';\nimport { AddMemberCertificatesDialogComponent } from './add-member-certificates-dialog/add-member-certificates-dialog.component';\nimport { UserService } from 'app/services/user.service';\n\n\nexport interface PeriodicElement {\n  id: string;\n  type: string;\n  affiliation: string;\n}\n\n@Component({\n  selector: 'app-add-members-certificates',\n  templateUrl: './add-members-certificates.component.html',\n  styleUrls: ['./add-members-certificates.component.scss']\n})\nexport class AddMembersCertificatesComponent implements OnInit {\n\n  title: string;\n  name: string;\n  certificate: string;\n  users: Array<Object> = [];\n  horizontalPosition: MatSnackBarHorizontalPosition = 'center';\n  verticalPosition: MatSnackBarVerticalPosition = 'bottom';\n  displayedColumns: string[] = [\n    'id',\n    'type',\n    'affiliation',\n    'action'\n  ];\n  dataSource = new MatTableDataSource();\n\n  @ViewChild(MatSort) sort: MatSort;\n  constructor(\n    public dialog: MatDialog,\n    private snackBar: MatSnackBar,\n    private userService: UserService\n  ) { }\n  ngOnInit() {\n    this.dataSource.sort = this.sort;\n    this.getAllUsers();\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  openDialog(): void {\n    const dialogRef = this.dialog.open(AddMemberCertificatesDialogComponent, {\n      width: '50%',\n      data: {\n        title: this.title,\n        name: this.name,\n        certificate: this.certificate\n\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      console.log(result);\n    });\n  }\n\n  getAllUsers() {\n    this.userService.getAllUsers().subscribe(\n      res => {\n        const response = res.valueOf();\n        if (response['success']) {\n          response['result'].forEach(identity => {\n            this.users.push(\n              {\n                id: identity.id,\n                type: identity.type,\n                affiliation: identity.affiliation,\n              }\n            );\n          });\n          this.dataSource.data = this.users;\n          this.dataSource._updateChangeSubscription();\n        } else {\n          this.dataSource.data = [];\n        }\n      },\n      err => { console.log(err); }\n    );\n  }\n\n  openSnackBarCertificate() {\n    this.snackBar.open('Certificate has been revoked', 'Close', {\n      duration: 1000,\n      horizontalPosition: this.horizontalPosition,\n      verticalPosition: this.verticalPosition,\n    });\n  }\n\n  openSnackBarSyncCertificate() {\n    this.snackBar.open('Certificate has been synchronized', 'Close', {\n      duration: 1000,\n      horizontalPosition: this.horizontalPosition,\n      verticalPosition: this.verticalPosition,\n    });\n  }\n}","module.exports = \"<h1 mat-dialog-title>{{data.title}}</h1>\\n<div mat-dialog-content>\\n  <div class=\\\"card\\\">\\n    <div class=\\\"card-body\\\">\\n\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n            <input matInput placeholder=\\\"Peer Name\\\" [(ngModel)]=\\\"data.name\\\">\\n          </mat-form-field>\\n        </div>\\n        <!-- <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n            <input matInput placeholder=\\\"Channel Name\\\" [(ngModel)]=\\\"data.channel\\\">\\n          </mat-form-field>\\n        </div> -->\\n\\n        <!--\\n      <div class=\\\"row\\\">\\n          <div class=\\\"col-md-6\\\">\\n              <mat-form-field>\\n                  <mat-label>Node Type</mat-label>\\n                  <mat-select [(value)]=\\\"data.type\\\">\\n                    <mat-option>--</mat-option>\\n                    <mat-option *ngFor=\\\"let type of types\\\" [value]=\\\"type\\\">{{type}}</mat-option>\\n                  </mat-select>\\n                </mat-form-field>\\n          </div>\\n          <div class=\\\"col-md-6\\\">\\n              <mat-form-field>\\n                  <mat-label>MSP ID</mat-label>\\n                  <mat-select [(value)]=\\\"data.mspId\\\">\\n                    <mat-option>--</mat-option>\\n                    <mat-option *ngFor=\\\"let msp of msps\\\" [value]=\\\"msp\\\">{{msp}}</mat-option>\\n                  </mat-select>\\n                </mat-form-field>\\n          </div> -->\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n<div mat-dialog-actions>\\n  <button mat-button class=\\\"btn btn-danger\\\" (click)=\\\"onNoClick()\\\">Cancel</button>\\n  <button mat-button class=\\\"btn btn-danger\\\" (click)=\\\"joinPeer()\\\" cdkFocusInitial>Join Peer</button>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { PeerService } from 'app/services/peer.service';\nimport { ChannelService } from 'app/services/channel.service';\n\nexport interface DialogData {\n  title: string;\n  name: string;\n  // type: string;\n  // mspId: string;\n}\n\n@Component({\n  selector: 'app-add-peer',\n  templateUrl: './add-peer.component.html',\n  styleUrls: ['./add-peer.component.scss']\n})\nexport class AddPeerComponent implements OnInit {\n\n  constructor(\n    private peerService: PeerService,\n    private channelService: ChannelService,\n    public dialogRef: MatDialogRef<AddPeerComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n    data.title = 'Join Channel'\n  }\n  channel: string;\n  Channels: Array<string> = [];\n  Peers: Array<string> = [];\n\n  ngOnInit() {\n    this.getPeers();\n    this.channel = this.channelService.getCurrentChannel();\n    console.log(this.channel);\n  }\n\n  joinPeer() {\n    const peerDetails = {\n      peers: [this.data.name],\n      channel: this.channel\n    };\n    this.peerService.joinChannel(peerDetails).subscribe(\n      res => {\n        this.onNoClick(res);\n      },\n      err => {\n        this.onNoClick(err);\n      }\n    );\n  }\n\n  getChannels() {\n    this.channelService.getChannels().subscribe(\n      res => {\n        res.forEach((channel) => {\n          this.Channels.push(channel.name);\n        });\n      },\n      err => { console.log(err); }\n    );\n  }\n\n  getPeers() {\n    this.peerService.getPeers().subscribe(\n      res => {\n        res.forEach(peer => {\n          this.Peers.push(peer.name);\n        });\n      },\n      err => { console.log(err); }\n    );\n  }\n\n  onNoClick(result): void {\n    this.dialogRef.close(result);\n  }\n}\n","module.exports = \"<div class=\\\"col-md-12\\\">\\n  <div class=\\\"col-md-12\\\">\\n    <mat-form-field>\\n      <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n    </mat-form-field>\\n    <button mat-raised-button class=\\\"btn btn-danger\\\" id=\\\"addNode\\\" (click)=\\\"openDialog()\\\">\\n      <mat-icon>add_to_queue</mat-icon> Join Channel</button>\\n  </div>\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\n\\n    <!-- NAME Column -->\\n    <ng-container matColumnDef=\\\"name\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> NAME </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        {{element.name}}\\n      </td>\\n    </ng-container>\\n\\n    <!-- ROUTE Column -->\\n    <ng-container matColumnDef=\\\"route\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ROUTE </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.route}} </td>\\n    </ng-container>\\n\\n    <!-- TYPE Column -->\\n    <ng-container matColumnDef=\\\"type\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> TYPE </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.type}} </td>\\n    </ng-container>\\n\\n    <!-- MSP ID Column -->\\n    <ng-container matColumnDef=\\\"mspId\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> MSP ID </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.mspId}} </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n\\n</div>\"","module.exports = \"table {\\n  width: 100%; }\\n\\n#addNode {\\n  float: right;\\n  margin-top: 15px; }\\n\\nmat-form-field {\\n  display: inline-block !important; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport {\n  MatTableDataSource, MatSort,\n  MatDialog, MatSnackBarHorizontalPosition,\n  MatSnackBarVerticalPosition, MatSnackBar\n} from '@angular/material';\nimport { AddPeerComponent } from '../add-peer/add-peer.component';\nimport { PeerService } from 'app/services/peer.service';\n\n@Component({\n  selector: 'app-list-peers',\n  templateUrl: './list-peers.component.html',\n  styleUrls: ['./list-peers.component.scss']\n})\nexport class ListPeersComponent implements OnInit {\n\n  title: string;\n  name: string;\n  route: string;\n  type: string;\n  mspId: string;\n\n  displayedColumns: string[] = [\n    'name',\n    'route',\n    'type',\n    'mspId'\n  ];\n  horizontalPosition: MatSnackBarHorizontalPosition = 'center';\n  verticalPosition: MatSnackBarVerticalPosition = 'bottom'\n  dataSource = new MatTableDataSource();\n  constructor(\n    private peerService: PeerService,\n    public dialog: MatDialog,\n    private snackBar: MatSnackBar\n  ) {\n    this.dataSource.sort = this.sort;\n  }\n\n  // tslint:disable-next-line: member-ordering\n  @ViewChild(MatSort) sort: MatSort;\n  blinker: boolean = true;\n  ngOnInit() {\n    this.getPeers();\n    this.getOrderers();\n  }\n\n  getOrderers() {\n    this.peerService.getOrderers().subscribe(\n      res => {\n        res.orderers.forEach(orderer => {\n          let or = this.buildOrderer(orderer, res.mspId);\n          this.dataSource.data.push(or);\n          this.dataSource._updateChangeSubscription();\n        });\n      },\n      err => { console.log(err); }\n    );\n  }\n\n  getPeers() {\n    this.peerService.getPeers().subscribe(\n      res => {\n        res.forEach(peer => {\n          this.dataSource.data.push(peer);\n          this.dataSource._updateChangeSubscription();\n        });\n      },\n      err => { console.log(err); }\n    );\n  }\n\n  buildOrderer(orderer, mspId): any {\n    return { name: orderer._name, route: orderer._url, mspId, type: 'Orderer' };\n  }\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n  openDialog(): void {\n    const dialogRef = this.dialog.open(AddPeerComponent, {\n      width: '50%',\n      data: {\n        title: this.title,\n        name: this.name,\n        route: this.route,\n        type: this.type,\n        mspId: this.mspId\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result.message) {\n        this.openSnackBar(result.message);\n      } else if (result === 'fail') {\n        this.openSnackBar('Unhandled exception might be occured');\n      }\n    });\n  }\n\n  openSnackBar(message: string) {\n    this.snackBar.open(message, 'Close', {\n      duration: 1000,\n      horizontalPosition: this.horizontalPosition,\n      verticalPosition: this.verticalPosition,\n    });\n  }\n\n}\n","export class InitiateChaincode {\n  peers: Array<string>;\n  chaincodeName: string;\n  chaincodeVersion: string;\n  chaincodeType: string;\n  fcn: string;\n  args: Array<string>;\n  constructor(config) {\n    this.peers = config.peers;\n    this.chaincodeName = config.chaincodeName;\n    this.chaincodeVersion = config.chaincodeVersion;\n    this.chaincodeType = config.chaincodeType;\n    this.fcn = config.fcn;\n    this.args = config.args;\n  }\n}\n\nexport class InstallChaincode {\n  peers: Array<string>;\n  chaincodeName: string;\n  chaincodeVersion: string;\n  chaincodePath: string;\n  chaincodeType: string;\n\n  constructor(_config) {\n    this.peers = _config.peers;\n    this.chaincodeName = _config.chaincodeName;\n    this.chaincodeType = _config.chaincodeType;\n    this.chaincodeVersion = _config.chaincodeVersion;\n    this.chaincodePath = _config.chaincodePath;\n  }\n}","export class User {\n    username: string;\n    password: string;\n    orgName: string;\n    affiliation: string;\n    role: string;\n    attributes: Array<string>;\n}","import { NgModule } from '@angular/core';\nimport { CommonModule, } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\nimport { BlockchainhomeComponent } from 'app/lazyloading/blockchain/blockchainhome/blockchainhome.component';\n\n\n\nconst routes: Routes = [\n  { path: '', component: BlockchainhomeComponent }\n];\n\n@NgModule({\n\n  imports: [\n    RouterModule.forChild(routes),\n    CommonModule\n  ],\n  exports: [RouterModule]\n\n})\nexport class BlockchainRoutingModule { }\n"],"sourceRoot":""}