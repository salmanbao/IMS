{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ngx-mask/app/ngx-mask/config.ts","ng://ngx-mask/app/ngx-mask/mask-applier.service.ts","ng://ngx-mask/app/ngx-mask/mask.service.ts","ng://ngx-mask/app/ngx-mask/mask.directive.ts","ng://ngx-mask/app/ngx-mask/mask.pipe.ts","ng://ngx-mask/app/ngx-mask/ngx-mask.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__read","o","m","ar","error","config","InjectionToken","NEW_CONFIG","INITIAL_CONFIG","initialConfig","sufix","prefix","clearIfNotMatch","showTemplate","showMaskTyped","dropSpecialCharacters","hiddenInput","undefined","shownMaskExpression","validation","specialCharacters","patterns","0","pattern","RegExp","9","optional","X","symbol","A","S","M","H","h","withoutValidation","MaskApplierService","_config","maskExpression","actualValue","separator","str","char","decimalChar","precision","x","split","decimals","res","rgx","test","replace","substr","percentage","Number","getPrecision","Infinity","checkInputPrecision","inputValue","decimalMarker","precisionRegEx","precisionMatch","match","substring","endsWith","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","applyMaskWithPattern","maskAndPattern","_a","mask","customPattern","applyMask","position","cb","cursor","result","multi","backspaceShift","shift","slice","inputArray","toString","ipError","filter","startsWith","_checkInput","strForSep","includes","indexOf","lastIndexOf","commaShift","shiftStep","add","clear","inputSymbol","_checkSymbolMask","_findSpecialChar","newPosition","has","find","val","maskSymbol","join","Injectable","tslib_1.__param","Inject","MaskService","document","_elementRef","_renderer","_this","_super","isNumberValue","maskIsShown","selStart","selEnd","onChange","_formElement","nativeElement","__","constructor","create","tslib_1.__extends","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","shiftTypedSymbols","Boolean","getActualValue","item","hideInput","resLen","prefNmask","applyValueChanges","activeElement","clearIfNotMatchFn","map","curr","index","compare","symbolToReplace","currSymbol","replaceSymbol","inputVal","Error","_checkForIp","formElementProperty","_b","name","setProperty","checkSpecialCharAmount","arr","isArray","_removeMask","_removeSufix","_removePrefix","_checkSymbols","specialCharactersForRemove","_regExpForRemove","toFixed","DOCUMENT","ElementRef","Renderer2","MaskDirective","_maskService","_position","onTouch","ngOnChanges","changes","_maskValue","currentValue","_applyMask","validate","Mask error","counterOfOpt","this_1","opt","length_1","onInput","el","_inputValue","selectionStart","caretShift","_backspaceShift","selectionEnd","_code","onBlur","onFocus","keyCode","setSelectionRange","focus","a","code","preventDefault","cursorStart","onPaste","MAX_SAFE_INTEGER","writeValue","_arguments","generator","String","P","Promise","resolve","reject","fulfilled","rejected","then","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_repeatPatternSymbols","maskExp","reduce","accum","currval","_start","_end","repeatNumber","tslib_1.__decorate","Input","HostListener","MaskDirective_1","Directive","selector","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NG_VALIDATORS","MaskPipe","transform","Pipe","pure","NgxMaskModule","forRoot","configValue","ngModule","NgxMaskModule_1","useValue","useFactory","_configFactory","deps","forChild","_configValue","NgModule","exports","declarations","initConfig","Function"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { InjectionToken } from '@angular/core';\n\nexport interface IConfig {\n    sufix: string;\n    prefix: string;\n    clearIfNotMatch: boolean;\n    showTemplate: boolean;\n    showMaskTyped: boolean;\n    shownMaskExpression: string;\n    dropSpecialCharacters: boolean | string[];\n    specialCharacters: string[];\n    hiddenInput: boolean | undefined;\n    validation: boolean;\n    patterns: {\n        [character: string]: {\n            pattern: RegExp;\n            optional?: boolean;\n            symbol?: string;\n        };\n    };\n}\n\nexport type optionsConfig = Partial<IConfig>;\nexport const config: InjectionToken<IConfig> = new InjectionToken('config');\nexport const NEW_CONFIG: InjectionToken<IConfig> = new InjectionToken('NEW_CONFIG');\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\n\nexport const initialConfig: IConfig = {\n    sufix: '',\n    prefix: '',\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    dropSpecialCharacters: true,\n    hiddenInput: undefined,\n    shownMaskExpression: '',\n    validation: true,\n    // tslint:disable-next-line: quotemark\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true,\n        },\n        X: {\n            pattern: new RegExp('\\\\d'),\n            symbol: '*',\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]'),\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]'),\n        },\n        d: {\n            pattern: new RegExp('\\\\d'),\n        },\n        m: {\n            pattern: new RegExp('\\\\d'),\n        },\n        M: {\n            pattern: new RegExp('\\\\d'),\n        },\n        H: {\n            pattern: new RegExp('\\\\d'),\n        },\n        h: {\n            pattern: new RegExp('\\\\d'),\n        },\n        s: {\n            pattern: new RegExp('\\\\d'),\n        },\n    },\n};\n\nexport const withoutValidation: string[] = [\n    'percent',\n    'Hh:m0:s0',\n    'Hh:m0',\n    'Hh',\n    'm0:s0',\n    's0',\n    'm0',\n    'separator',\n    'dot_separator',\n    'comma_separator',\n    'd0/M0/0000',\n    'd0/M0',\n    'd0',\n    'M0',\n];\n","import { Inject, Injectable } from '@angular/core';\nimport { config, IConfig } from './config';\n\n@Injectable()\nexport class MaskApplierService {\n    public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n    public hiddenInput: IConfig['hiddenInput'];\n    public showTemplate!: IConfig['showTemplate'];\n    public clearIfNotMatch!: IConfig['clearIfNotMatch'];\n    public maskExpression: string = '';\n    public actualValue: string = '';\n    public shownMaskExpression: string = '';\n    public maskSpecialCharacters!: IConfig['specialCharacters'];\n    public maskAvailablePatterns!: IConfig['patterns'];\n    public prefix!: IConfig['prefix'];\n    public sufix!: IConfig['sufix'];\n    public customPattern!: IConfig['patterns'];\n    public ipError?: boolean;\n    public showMaskTyped!: IConfig['showMaskTyped'];\n\n    private _shift!: Set<number>;\n\n    public constructor(@Inject(config) protected _config: IConfig) {\n        this._shift = new Set();\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config!.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.sufix = this._config.sufix;\n        this.hiddenInput = this._config.hiddenInput;\n        this.showMaskTyped = this._config.showMaskTyped;\n    }\n    // tslint:disable-next-line:no-any\n    public applyMaskWithPattern(inputValue: string, maskAndPattern: [string, IConfig['patterns']]): string {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    public applyMask(\n        inputValue: string,\n        maskExpression: string,\n        position: number = 0,\n        cb: Function = () => {}\n    ): string {\n        if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n            return '';\n        }\n        let cursor: number = 0;\n        let result: string = ``;\n        let multi: boolean = false;\n        let backspaceShift: boolean = false;\n        let shift: number = 1;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        const inputArray: string[] = inputValue.toString().split('');\n        if (maskExpression === 'IP') {\n            this.ipError = !!(inputArray.filter((i: string) => i === '.').length < 3 && inputArray.length < 7);\n            maskExpression = '099.099.099.099';\n        }\n        if (maskExpression.startsWith('percent')) {\n            if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/]/)) {\n                inputValue = this._checkInput(inputValue);\n                const precision: number = this.getPrecision(maskExpression);\n                inputValue = this.checkInputPrecision(inputValue, precision, '.');\n            }\n            if (this.percentage(inputValue)) {\n                result = inputValue;\n            } else {\n                result = inputValue.substring(0, inputValue.length - 1);\n            }\n        } else if (\n            maskExpression === 'separator' ||\n            maskExpression.startsWith('separator') ||\n            maskExpression === 'dot_separator' ||\n            maskExpression.startsWith('dot_separator') ||\n            maskExpression === 'comma_separator' ||\n            maskExpression.startsWith('comma_separator')\n        ) {\n            if (\n                inputValue.match('[wÐ°-ÑÐ-Ð¯]') ||\n                inputValue.match('[a-z]|[A-Z]') ||\n                inputValue.match(/[-@#!$%\\\\^&*()_Â£Â¬'+|~=`{}\\[\\]:\";<>.?\\/]/)\n            ) {\n                inputValue = this._checkInput(inputValue);\n            }\n            const precision: number = this.getPrecision(maskExpression);\n            let strForSep: string;\n            if (maskExpression.startsWith('separator')) {\n                if (\n                    inputValue.includes(',') &&\n                    inputValue.endsWith(',') &&\n                    inputValue.indexOf(',') !== inputValue.lastIndexOf(',')\n                ) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n            }\n            if (maskExpression.startsWith('dot_separator')) {\n                if (\n                    inputValue.indexOf('.') !== -1 &&\n                    inputValue.indexOf('.') === inputValue.lastIndexOf('.') &&\n                    inputValue.indexOf('.') > 3\n                ) {\n                    inputValue = inputValue.replace('.', ',');\n                }\n                inputValue =\n                    inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== ','\n                        ? inputValue.slice(1, inputValue.length)\n                        : inputValue;\n            }\n            if (maskExpression.startsWith('comma_separator')) {\n                inputValue =\n                    inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== '.'\n                        ? inputValue.slice(1, inputValue.length)\n                        : inputValue;\n            }\n            if (maskExpression === 'separator' || maskExpression.startsWith('separator')) {\n                if (inputValue.match(/[@#!$%^&*()_+|~=`{}\\[\\]:.\";<>?\\/]/)) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                inputValue = this.checkInputPrecision(inputValue, precision, ',');\n                strForSep = inputValue.replace(/\\s/g, '');\n                result = this.separator(strForSep, ' ', ',', precision);\n            } else if (maskExpression === 'dot_separator' || maskExpression.startsWith('dot_separator')) {\n                if (inputValue.match(/[@#!$%^&*()_+|~=`{}\\[\\]:\\s\";<>?\\/]/)) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                inputValue = this.checkInputPrecision(inputValue, precision, ',');\n                strForSep = inputValue.replace(/\\./g, '');\n                result = this.separator(strForSep, '.', ',', precision);\n            } else if (maskExpression === 'comma_separator' || maskExpression.startsWith('comma_separator')) {\n                strForSep = inputValue.replace(/,/g, '');\n                result = this.separator(strForSep, ',', '.', precision);\n            }\n\n            const commaShift: number = result.indexOf(',') - inputValue.indexOf(',');\n            const shiftStep: number = result.length - inputValue.length;\n\n            if (shiftStep > 0 && result[position] !== ',') {\n                backspaceShift = true;\n                let _shift: number = 0;\n                do {\n                    this._shift.add(position + _shift);\n                    _shift++;\n                } while (_shift < shiftStep);\n            } else if (\n                (commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3)) ||\n                (!(result.indexOf('.') >= position && position > 3) && shiftStep <= 0)\n            ) {\n                this._shift.clear();\n                backspaceShift = true;\n                shift = shiftStep;\n                position += shiftStep;\n                this._shift.add(position);\n            } else {\n                this._shift.clear();\n            }\n        } else {\n            for (\n                // tslint:disable-next-line\n                let i: number = 0, inputSymbol: string = inputArray[0];\n                i < inputArray.length;\n                i++, inputSymbol = inputArray[i]\n            ) {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n                    result += inputSymbol;\n                    cursor += 2;\n                } else if (\n                    maskExpression[cursor + 1] === '*' &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n                ) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                } else if (\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor]) &&\n                    maskExpression[cursor + 1] === '*'\n                ) {\n                    result += inputSymbol;\n                    multi = true;\n                } else if (\n                    maskExpression[cursor + 1] === '?' &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n                ) {\n                    result += inputSymbol;\n                    cursor += 3;\n                } else if (\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor]) ||\n                    (this.hiddenInput &&\n                        this.maskAvailablePatterns[maskExpression[cursor]] &&\n                        this.maskAvailablePatterns[maskExpression[cursor]].symbol === inputSymbol)\n                ) {\n                    if (maskExpression[cursor] === 'H') {\n                        if (Number(inputSymbol) > 2) {\n                            cursor += 1;\n                            const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'h') {\n                        if (result === '2' && Number(inputSymbol) > 3) {\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'm') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 's') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'd') {\n                        if (Number(inputSymbol) > 3) {\n                            cursor += 1;\n                            const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor - 1] === 'd') {\n                        if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 31) {\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'M') {\n                        if (Number(inputSymbol) > 1) {\n                            cursor += 1;\n                            const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor - 1] === 'M') {\n                        if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 12) {\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\n                        ? inputArray.length\n                        : cursor;\n                    this._shift.add(shiftStep + this.prefix.length || 0);\n                    i--;\n                } else if (\n                    this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\n                    this.maskAvailablePatterns[maskExpression[cursor]] &&\n                    this.maskAvailablePatterns[maskExpression[cursor]].optional\n                ) {\n                    cursor++;\n                    i--;\n                } else if (\n                    this.maskExpression[cursor + 1] === '*' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi\n                ) {\n                    cursor += 3;\n                    result += inputSymbol;\n                } else if (\n                    this.maskExpression[cursor + 1] === '?' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi\n                ) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n            }\n        }\n        if (\n            result.length + 1 === maskExpression.length &&\n            this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1\n        ) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n\n        let newPosition: number = position + 1;\n\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n\n        cb(this._shift.has(position) ? shift : 0, backspaceShift);\n        if (shift < 0) {\n            this._shift.clear();\n        }\n        let res: string = this.sufix ? `${this.prefix}${result}${this.sufix}` : `${this.prefix}${result}`;\n        if (result.length === 0) {\n            res = `${this.prefix}${result}`;\n        }\n        return res;\n    }\n    public _findSpecialChar(inputSymbol: string): undefined | string {\n        return this.maskSpecialCharacters.find((val: string) => val === inputSymbol);\n    }\n\n    protected _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\n        this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n        return (\n            this.maskAvailablePatterns[maskSymbol] &&\n            this.maskAvailablePatterns[maskSymbol].pattern &&\n            this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol)\n        );\n    }\n\n    private separator = (str: string, char: string, decimalChar: string, precision: number) => {\n        str += '';\n        const x: string[] = str.split(decimalChar);\n        const decimals: string = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n        let res: string = x[0];\n        const rgx: RegExp = /(\\d+)(\\d{3})/;\n        while (rgx.test(res)) {\n            res = res.replace(rgx, '$1' + char + '$2');\n        }\n        if (precision === undefined) {\n            return res + decimals;\n        } else if (precision === 0) {\n            return res;\n        }\n        return res + decimals.substr(0, precision + 1);\n    };\n\n    private percentage = (str: string): boolean => {\n        return Number(str) >= 0 && Number(str) <= 100;\n    };\n\n    private getPrecision = (maskExpression: string): number => {\n        const x: string[] = maskExpression.split('.');\n        if (x.length > 1) {\n            return Number(x[x.length - 1]);\n        }\n        return Infinity;\n    };\n\n    private checkInputPrecision = (inputValue: string, precision: number, decimalMarker: string): string => {\n        if (precision < Infinity) {\n            let precisionRegEx: RegExp;\n\n            if (decimalMarker === '.') {\n                precisionRegEx = new RegExp(`\\\\.\\\\d{${precision}}.*$`);\n            } else {\n                precisionRegEx = new RegExp(`,\\\\d{${precision}}.*$`);\n            }\n\n            const precisionMatch: RegExpMatchArray | null = inputValue.match(precisionRegEx);\n            if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            } else if (precision === 0 && inputValue.endsWith(decimalMarker)) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n        }\n        return inputValue;\n    };\n\n    private _checkInput(str: string): string {\n        return str\n            .split('')\n            .filter((i: string) => i.match('\\\\d') || i === '.' || i === ',')\n            .join('');\n    }\n    // tslint:disable-next-line: max-file-line-count\n}\n","import { ElementRef, Host, Inject, Injectable, Renderer2, Self, SkipSelf } from '@angular/core';\nimport { config, IConfig } from './config';\nimport { DOCUMENT } from '@angular/common';\nimport { MaskApplierService } from './mask-applier.service';\n\n@Injectable()\nexport class MaskService extends MaskApplierService {\n    public validation: boolean = true;\n    public maskExpression: string = '';\n    public isNumberValue: boolean = false;\n    public showMaskTyped: boolean = false;\n    public maskIsShown: string = '';\n    public selStart: number | null = null;\n    public selEnd: number | null = null;\n    protected _formElement: HTMLInputElement;\n    // tslint:disable-next-line\n    public onChange = (_: any) => {};\n    public constructor(\n        // tslint:disable-next-line\n        @Inject(DOCUMENT) private document: any,\n        @Inject(config) protected _config: IConfig,\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2\n    ) {\n        super(_config);\n        this._formElement = this._elementRef.nativeElement;\n    }\n\n    // tslint:disable-next-line:cyclomatic-complexity\n    public applyMask(\n        inputValue: string,\n        maskExpression: string,\n        position: number = 0,\n        cb: Function = () => {}\n    ): string {\n        if (!maskExpression) {\n            return inputValue;\n        }\n        this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n        if (this.maskExpression === 'IP' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (!inputValue && this.showMaskTyped) {\n            this.formControlResult(this.prefix);\n            return this.prefix + this.maskIsShown;\n        }\n        const getSymbol: string = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n        let newInputValue: string = '';\n        if (this.hiddenInput !== undefined) {\n            let actualResult: string[] = this.actualValue.split('');\n            inputValue !== '' && actualResult.length\n                ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n                    ? inputValue.length > actualResult.length\n                        ? actualResult.splice(this.selStart, 0, getSymbol)\n                        : inputValue.length < actualResult.length\n                        ? actualResult.length - inputValue.length === 1\n                            ? actualResult.splice(this.selStart - 1, 1)\n                            : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n                        : null\n                    : null\n                : (actualResult = []);\n            newInputValue = this.actualValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n        }\n        newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n        const result: string = super.applyMask(newInputValue, maskExpression, position, cb);\n        this.actualValue = this.getActualValue(result);\n\n        if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== ',');\n        }\n        if ('separator' === this.maskExpression && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== ',');\n        }\n        if (this.maskExpression.startsWith('dot_separator') && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== ',');\n        }\n        if ('dot_separator' === this.maskExpression && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== ',');\n        }\n        if (this.maskExpression.startsWith('comma_separator') && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== '.');\n        }\n        if ('comma_separator' === this.maskExpression && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== '.');\n        }\n\n        this.formControlResult(result);\n\n        let ifMaskIsShown: string = '';\n        if (!this.showMaskTyped) {\n            if (this.hiddenInput) {\n                return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n            }\n            return result;\n        }\n        const resLen: number = result.length;\n        const prefNmask: string = this.prefix + this.maskIsShown;\n        ifMaskIsShown = this.maskExpression === 'IP' ? prefNmask : prefNmask.slice(resLen);\n        return result + ifMaskIsShown;\n    }\n\n    public applyValueChanges(position: number = 0, cb: Function = () => {}): void {\n        this._formElement.value = this.applyMask(this._formElement.value, this.maskExpression, position, cb);\n        if (this._formElement === this.document.activeElement) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n\n    public hideInput(inputValue: string, maskExpression: string): string {\n        return inputValue\n            .split('')\n            .map((curr: string, index: number) => {\n                if (\n                    this.maskAvailablePatterns &&\n                    this.maskAvailablePatterns[maskExpression[index]] &&\n                    this.maskAvailablePatterns[maskExpression[index]].symbol\n                ) {\n                    return this.maskAvailablePatterns[maskExpression[index]].symbol;\n                }\n                return curr;\n            })\n            .join('');\n    }\n\n    // this function is not necessary, it checks result against maskExpression\n    public getActualValue(res: string): string {\n        const compare: string[] = res\n            .split('')\n            .filter(\n                (symbol: string, i: number) =>\n                    this._checkSymbolMask(symbol, this.maskExpression[i]) ||\n                    (this.maskSpecialCharacters.includes(this.maskExpression[i]) && symbol === this.maskExpression[i])\n            );\n        if (compare.join('') === res) {\n            return compare.join('');\n        }\n        return res;\n    }\n\n    public shiftTypedSymbols(inputValue: string): string {\n        let symbolToReplace: string = '';\n        const newInputValue: string[] =\n            (inputValue &&\n                inputValue.split('').map((currSymbol: string, index: number) => {\n                    if (\n                        this.maskSpecialCharacters.includes(inputValue[index + 1]) &&\n                        inputValue[index + 1] !== this.maskExpression[index + 1]\n                    ) {\n                        symbolToReplace = currSymbol;\n                        return inputValue[index + 1];\n                    }\n                    if (symbolToReplace.length) {\n                        const replaceSymbol: string = symbolToReplace;\n                        symbolToReplace = '';\n                        return replaceSymbol;\n                    }\n                    return currSymbol;\n                })) ||\n            [];\n        return newInputValue.join('');\n    }\n\n    public showMaskInInput(inputVal?: string): string {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            } else {\n                return this.shownMaskExpression;\n            }\n        } else if (this.showMaskTyped) {\n            if (inputVal) {\n                return this._checkForIp(inputVal);\n            }\n            return this.maskExpression.replace(/\\w/g, '_');\n        }\n        return '';\n    }\n\n    public clearIfNotMatchFn(): void {\n        if (\n            this.clearIfNotMatch &&\n            this.prefix.length + this.maskExpression.length + this.sufix.length !== this._formElement.value.length\n        ) {\n            this.formElementProperty = ['value', ''];\n            this.applyMask(this._formElement.value, this.maskExpression);\n        }\n    }\n\n    public set formElementProperty([name, value]: [string, string | boolean]) {\n        this._renderer.setProperty(this._formElement, name, value);\n    }\n\n    public checkSpecialCharAmount(mask: string): number {\n        const chars: string[] = mask.split('').filter((item: string) => this._findSpecialChar(item));\n        return chars.length;\n    }\n\n    // tslint:disable-next-line: cyclomatic-complexity\n    private _checkForIp(inputVal: string): string {\n        if (inputVal === '#') {\n            return '_._._._';\n        }\n        const arr: string[] = [];\n        for (let i: number = 0; i < inputVal.length; i++) {\n            if (inputVal[i].match('\\\\d')) {\n                arr.push(inputVal[i]);\n            }\n        }\n        if (arr.length <= 3) {\n            return '_._._';\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return '_._';\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return '_';\n        }\n        if (arr.length > 9 && arr.length <= 12) {\n            return '';\n        }\n        return '';\n    }\n    private formControlResult(inputValue: string): void {\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            this.onChange(\n                this._removeMask(this._removeSufix(this._removePrefix(inputValue)), this.dropSpecialCharacters)\n            );\n        } else if (this.dropSpecialCharacters) {\n            this.onChange(this._checkSymbols(inputValue));\n        } else {\n            this.onChange(this._removeSufix(this._removePrefix(inputValue)));\n        }\n    }\n\n    private _removeMask(value: string, specialCharactersForRemove: string[]): string {\n        return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n    }\n\n    private _removePrefix(value: string): string {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, '') : value;\n    }\n\n    private _removeSufix(value: string): string {\n        if (!this.sufix) {\n            return value;\n        }\n        return value ? value.replace(this.sufix, '') : value;\n    }\n\n    private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\n        return new RegExp(specialCharactersForRemove.map((item: string) => `\\\\${item}`).join('|'), 'gi');\n    }\n    private _checkSymbols(result: string): string | number | undefined | null {\n        if ('separator.2' === this.maskExpression && this.isNumberValue) {\n            // tslint:disable-next-line:max-line-length\n            return result === ''\n                ? result\n                : result === ','\n                ? null\n                : Number(\n                      this._removeMask(\n                          this._removeSufix(this._removePrefix(result)),\n                          this.maskSpecialCharacters\n                      ).replace(',', '.')\n                  ).toFixed(2);\n        }\n        if ('dot_separator.2' === this.maskExpression && this.isNumberValue) {\n            // tslint:disable-next-line:max-line-length\n            return result === ''\n                ? result\n                : result === ','\n                ? null\n                : Number(\n                      this._removeMask(\n                          this._removeSufix(this._removePrefix(result)),\n                          this.maskSpecialCharacters\n                      ).replace(',', '.')\n                  ).toFixed(2);\n        }\n        if ('comma_separator.2' === this.maskExpression && this.isNumberValue) {\n            // tslint:disable-next-line:max-line-length\n            return result === ''\n                ? result\n                : result === '.'\n                ? null\n                : Number(\n                      this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters)\n                  ).toFixed(2);\n        }\n        if (this.isNumberValue) {\n            return result === ''\n                ? result\n                : Number(this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters));\n        } else if (\n            this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters).indexOf(',') !==\n            -1\n        ) {\n            return this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters).replace(\n                ',',\n                '.'\n            );\n        } else {\n            return this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters);\n        }\n    }\n}\n","import { Directive, forwardRef, HostListener, Inject, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ControlValueAccessor, FormControl, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors } from '@angular/forms';\nimport { MaskService } from './mask.service';\nimport { IConfig, withoutValidation } from './config';\nimport { CustomKeyboardEvent } from './custom-keyboard-event';\n\n@Directive({\n    selector: '[mask]',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true,\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true,\n        },\n        MaskService,\n    ],\n})\nexport class MaskDirective implements ControlValueAccessor, OnChanges {\n    @Input('mask') public maskExpression: string = '';\n    @Input() public specialCharacters: IConfig['specialCharacters'] = [];\n    @Input() public patterns: IConfig['patterns'] = {};\n    @Input() public prefix: IConfig['prefix'] = '';\n    @Input() public sufix: IConfig['sufix'] = '';\n    @Input() public dropSpecialCharacters: IConfig['dropSpecialCharacters'] | null = null;\n    @Input() public hiddenInput: IConfig['hiddenInput'] | null = null;\n    @Input() public showMaskTyped: IConfig['showMaskTyped'] | null = null;\n    @Input() public shownMaskExpression: IConfig['shownMaskExpression'] | null = null;\n    @Input() public showTemplate: IConfig['showTemplate'] | null = null;\n    @Input() public clearIfNotMatch: IConfig['clearIfNotMatch'] | null = null;\n    @Input() public validation: IConfig['validation'] | null = null;\n    private _maskValue!: string;\n    private _inputValue!: string;\n    private _position: number | null = null;\n    // tslint:disable-next-line\n    private _start!: number;\n    private _end!: number;\n    private _code!: string;\n    // tslint:disable-next-line\n    public onChange = (_: any) => {};\n    public onTouch = () => {};\n\n    public constructor(\n        // tslint:disable-next-line\n        @Inject(DOCUMENT) private document: any,\n        private _maskService: MaskService\n    ) {}\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        // tslint:disable-next-line:max-line-length\n        const {\n            maskExpression,\n            specialCharacters,\n            patterns,\n            prefix,\n            sufix,\n            dropSpecialCharacters,\n            hiddenInput,\n            showMaskTyped,\n            shownMaskExpression,\n            showTemplate,\n            clearIfNotMatch,\n            validation,\n        } = changes;\n        if (maskExpression) {\n            this._maskValue = changes.maskExpression.currentValue || '';\n        }\n        if (specialCharacters) {\n            if (\n                !specialCharacters.currentValue ||\n                !Array.isArray(specialCharacters.currentValue) ||\n                (Array.isArray(specialCharacters.currentValue) && !specialCharacters.currentValue.length)\n            ) {\n                return;\n            }\n            this._maskService.maskSpecialCharacters = changes.specialCharacters.currentValue || '';\n        }\n        if (patterns) {\n            this._maskService.maskAvailablePatterns = patterns.currentValue;\n        }\n        if (prefix) {\n            this._maskService.prefix = prefix.currentValue;\n        }\n        if (sufix) {\n            this._maskService.sufix = sufix.currentValue;\n        }\n        if (dropSpecialCharacters) {\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n        if (hiddenInput) {\n            this._maskService.hiddenInput = hiddenInput.currentValue;\n        }\n        if (showMaskTyped) {\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\n        }\n        if (shownMaskExpression) {\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n        if (showTemplate) {\n            this._maskService.showTemplate = showTemplate.currentValue;\n        }\n        if (clearIfNotMatch) {\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n        if (validation) {\n            this._maskService.validation = validation.currentValue;\n        }\n        this._applyMask();\n    }\n\n    // tslint:disable-next-line: cyclomatic-complexity\n    public validate({ value }: FormControl): ValidationErrors | null {\n        if (!this._maskService.validation) {\n            return null;\n        }\n        if (this._maskService.ipError) {\n            return { 'Mask error': true };\n        }\n        if (this._maskValue.startsWith('dot_separator') || this._maskValue.startsWith('comma_separator')) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (value && value.toString().length >= 1) {\n            let counterOfOpt: number = 0;\n            for (const key in this._maskService.maskAvailablePatterns) {\n                if (\n                    this._maskService.maskAvailablePatterns[key].optional &&\n                    this._maskService.maskAvailablePatterns[key].optional === true\n                ) {\n                    if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n                        const opt: string = this._maskValue\n                            .split('')\n                            .filter((i: string) => i === key)\n                            .join('');\n                        counterOfOpt += opt.length;\n                    } else if (this._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (\n                        this._maskValue.indexOf(key) !== -1 &&\n                        value.toString().length >= this._maskValue.indexOf(key)\n                    ) {\n                        return null;\n                    }\n                    if (counterOfOpt === this._maskValue.length) {\n                        return null;\n                    }\n                }\n            }\n            if (\n                this._maskValue.indexOf('*') === 1 ||\n                this._maskValue.indexOf('?') === 1 ||\n                this._maskValue.indexOf('{') === 1\n            ) {\n                return null;\n            } else if (\n                (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*')) ||\n                (this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?'))\n            ) {\n                return { 'Mask error': true };\n            }\n            if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n                const length: number = this._maskService.dropSpecialCharacters\n                    ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt\n                    : this._maskValue.length - counterOfOpt;\n                if (value.toString().length < length) {\n                    return { 'Mask error': true };\n                }\n            }\n        }\n        return null;\n    }\n\n    @HostListener('input', ['$event'])\n    public onInput(e: CustomKeyboardEvent): void {\n        const el: HTMLInputElement = e.target as HTMLInputElement;\n        this._inputValue = el.value;\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n        const position: number =\n            el.selectionStart === 1\n                ? (el.selectionStart as number) + this._maskService.prefix.length\n                : (el.selectionStart as number);\n        let caretShift: number = 0;\n        let backspaceShift: boolean = false;\n        this._maskService.applyValueChanges(position, (shift: number, _backspaceShift: boolean) => {\n            caretShift = shift;\n            backspaceShift = _backspaceShift;\n        });\n        // only set the selection if the element is active\n        if (this.document.activeElement !== el) {\n            return;\n        }\n        this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n        el.selectionStart = el.selectionEnd =\n            this._position !== null\n                ? this._position\n                : position +\n                  // tslint:disable-next-line\n                  (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n        this._position = null;\n    }\n\n    @HostListener('blur')\n    public onBlur(): void {\n        this._maskService.clearIfNotMatchFn();\n        this.onTouch();\n    }\n\n    @HostListener('click', ['$event'])\n    public onFocus(e: MouseEvent | CustomKeyboardEvent): void {\n        const el: HTMLInputElement = e.target as HTMLInputElement;\n        const posStart: number = 0;\n        const posEnd: number = 0;\n        if (\n            el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // tslint:disable-next-line\n            (e as any).keyCode !== 38\n        )\n            if (this._maskService.showMaskTyped) {\n                // ) {\n                //     return;\n                // }\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\n                if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                } else if (el.setSelectionRange && this._maskService.maskIsShown !== el.value) {\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                }\n                if (this._inputValue.match('[wÐ°-ÑÐ-Ð¯]') || this._inputValue.match('[a-z]|[A-Z]')) {\n                    posStart;\n                }\n            }\n        el.value =\n            !el.value || el.value === this._maskService.prefix\n                ? this._maskService.prefix + this._maskService.maskIsShown\n                : el.value;\n        /** fix of cursor position with prefix when mouse click occur */\n        if (((el.selectionStart as number) || (el.selectionEnd as number)) <= this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    public a(e: CustomKeyboardEvent): void {\n        this._code = e.code ? e.code : e.key;\n        const el: HTMLInputElement = e.target as HTMLInputElement;\n        this._maskService.selStart = el.selectionStart;\n        this._maskService.selEnd = el.selectionEnd;\n        if (e.keyCode === 38) {\n            e.preventDefault();\n        }\n        if (e.keyCode === 37 || e.keyCode === 8) {\n            if (e.keyCode === 37) {\n                el.selectionStart = (el.selectionEnd as number) - 1;\n            }\n            if (e.keyCode === 8 && el.value.length === 0) {\n                el.selectionStart = el.selectionEnd;\n            }\n            if (\n                (el.selectionStart as number) <= this._maskService.prefix.length &&\n                (el.selectionEnd as number) <= this._maskService.prefix.length\n            ) {\n                e.preventDefault();\n            }\n            const cursorStart: number | null = el.selectionStart;\n            // this.onFocus(e);\n            if (e.keyCode === 8 && cursorStart === 0 && el.selectionEnd === el.value.length && el.value.length !== 0) {\n                this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n                this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n            }\n        }\n    }\n\n    @HostListener('paste')\n    public onPaste(): void {\n        this._position = Number.MAX_SAFE_INTEGER;\n    }\n\n    /** It writes the value in the input */\n    public async writeValue(inputValue: string | number): Promise<void> {\n        if (inputValue === undefined) {\n            inputValue = '';\n        }\n        if (typeof inputValue === 'number') {\n            inputValue = String(inputValue);\n            inputValue = this._maskValue.startsWith('dot_separator') ? inputValue.replace('.', ',') : inputValue;\n            this._maskService.isNumberValue = true;\n        }\n        (inputValue && this._maskService.maskExpression) ||\n        (this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped))\n            ? (this._maskService.formElementProperty = [\n                  'value',\n                  this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n              ])\n            : (this._maskService.formElementProperty = ['value', inputValue]);\n        this._inputValue = inputValue;\n    }\n\n    // tslint:disable-next-line\n    public registerOnChange(fn: any): void {\n        this.onChange = fn;\n        this._maskService.onChange = this.onChange;\n    }\n\n    // tslint:disable-next-line\n    public registerOnTouched(fn: any): void {\n        this.onTouch = fn;\n    }\n\n    /** It disables the input element */\n    public setDisabledState(isDisabled: boolean): void {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n\n    private _repeatPatternSymbols(maskExp: string): string {\n        return (\n            (maskExp.match(/{[0-9]+}/) &&\n                maskExp.split('').reduce((accum: string, currval: string, index: number): string => {\n                    this._start = currval === '{' ? index : this._start;\n\n                    if (currval !== '}') {\n                        return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n                    }\n                    this._end = index;\n                    const repeatNumber: number = Number(maskExp.slice(this._start + 1, this._end));\n                    const repaceWith: string = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                    return accum + repaceWith;\n                }, '')) ||\n            maskExp\n        );\n    }\n    // tslint:disable-next-line:no-any\n    private _applyMask(): any {\n        this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n        ];\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { MaskApplierService } from './mask-applier.service';\nimport { IConfig } from './config';\n\n@Pipe({\n    name: 'mask',\n    pure: true,\n})\nexport class MaskPipe implements PipeTransform {\n    public constructor(private _maskService: MaskApplierService) {}\n\n    public transform(value: string | number, mask: string | [string, IConfig['patterns']]): string {\n        if (!value && typeof value !== 'number') {\n            return '';\n        }\n        if (typeof mask === 'string') {\n            return this._maskService.applyMask(`${value}`, mask);\n        }\n        return this._maskService.applyMaskWithPattern(`${value}`, mask);\n    }\n}\n","import { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\nimport { MaskDirective } from './mask.directive';\nimport { MaskPipe } from './mask.pipe';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\n\n@NgModule({\n    exports: [MaskDirective, MaskPipe],\n    declarations: [MaskDirective, MaskPipe],\n})\nexport class NgxMaskModule {\n    public static forRoot(configValue?: optionsConfig | (() => optionsConfig)): ModuleWithProviders {\n        return {\n            ngModule: NgxMaskModule,\n            providers: [\n                {\n                    provide: NEW_CONFIG,\n                    useValue: configValue,\n                },\n                {\n                    provide: INITIAL_CONFIG,\n                    useValue: initialConfig,\n                },\n                {\n                    provide: config,\n                    useFactory: _configFactory,\n                    deps: [INITIAL_CONFIG, NEW_CONFIG],\n                },\n                MaskApplierService,\n            ],\n        };\n    }\n    public static forChild(_configValue?: optionsConfig): ModuleWithProviders {\n        return {\n            ngModule: NgxMaskModule,\n        };\n    }\n}\n\n/**\n * @internal\n */\nexport function _configFactory(\n    initConfig: optionsConfig,\n    configValue: optionsConfig | (() => optionsConfig)\n): optionsConfig {\n    return configValue instanceof Function ? { ...initConfig, ...configValue() } : { ...initConfig, ...configValue };\n}\n"]}