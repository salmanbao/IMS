{"version":3,"sources":["webpack:///./src/app/lazyloading/blockchain/blockchain.module.ts","webpack:///./src/app/lazyloading/blockchain/blockchainhome/blockchainhome.component.html","webpack:///./src/app/lazyloading/blockchain/blockchainhome/blockchainhome.component.scss","webpack:///./src/app/lazyloading/blockchain/blockchainhome/blockchainhome.component.ts","webpack:///./src/app/lazyloading/blockchain/ca/add-member/add-member.component.html","webpack:///./src/app/lazyloading/blockchain/ca/add-member/add-member.component.scss","webpack:///./src/app/lazyloading/blockchain/ca/add-member/add-member.component.ts","webpack:///./src/app/lazyloading/blockchain/ca/manage-certificates-authority/manage-certificates-authority.component.html","webpack:///./src/app/lazyloading/blockchain/ca/manage-certificates-authority/manage-certificates-authority.component.scss","webpack:///./src/app/lazyloading/blockchain/ca/manage-certificates-authority/manage-certificates-authority.component.ts","webpack:///./src/app/lazyloading/blockchain/chaincode/addcc/addcc.component.html","webpack:///./src/app/lazyloading/blockchain/chaincode/addcc/addcc.component.scss","webpack:///./src/app/lazyloading/blockchain/chaincode/addcc/addcc.component.ts","webpack:///./src/app/lazyloading/blockchain/chaincode/initiate-cc/initiate-cc.component.html","webpack:///./src/app/lazyloading/blockchain/chaincode/initiate-cc/initiate-cc.component.scss","webpack:///./src/app/lazyloading/blockchain/chaincode/initiate-cc/initiate-cc.component.ts","webpack:///./src/app/lazyloading/blockchain/chaincode/install-chaincode/install-chaincode.component.html","webpack:///./src/app/lazyloading/blockchain/chaincode/install-chaincode/install-chaincode.component.scss","webpack:///./src/app/lazyloading/blockchain/chaincode/install-chaincode/install-chaincode.component.ts","webpack:///./src/app/lazyloading/blockchain/chaincode/list-chaincode/list-chaincode.component.html","webpack:///./src/app/lazyloading/blockchain/chaincode/list-chaincode/list-chaincode.component.scss","webpack:///./src/app/lazyloading/blockchain/chaincode/list-chaincode/list-chaincode.component.ts","webpack:///./src/app/lazyloading/blockchain/channel/add-channel/add-channel.component.html","webpack:///./src/app/lazyloading/blockchain/channel/add-channel/add-channel.component.scss","webpack:///./src/app/lazyloading/blockchain/channel/add-channel/add-channel.component.ts","webpack:///./src/app/lazyloading/blockchain/channel/managechannels/managechannels.component.html","webpack:///./src/app/lazyloading/blockchain/channel/managechannels/managechannels.component.scss","webpack:///./src/app/lazyloading/blockchain/channel/managechannels/managechannels.component.ts","webpack:///./src/app/lazyloading/blockchain/channel/request-channel/request-channel.component.html","webpack:///./src/app/lazyloading/blockchain/channel/request-channel/request-channel.component.scss","webpack:///./src/app/lazyloading/blockchain/channel/request-channel/request-channel.component.ts","webpack:///./src/app/lazyloading/blockchain/notification/all-notifications/all-notifications.component.html","webpack:///./src/app/lazyloading/blockchain/notification/all-notifications/all-notifications.component.scss","webpack:///./src/app/lazyloading/blockchain/notification/all-notifications/all-notifications.component.ts","webpack:///./src/app/lazyloading/blockchain/notification/completed-notifications/completed-notifications.component.html","webpack:///./src/app/lazyloading/blockchain/notification/completed-notifications/completed-notifications.component.scss","webpack:///./src/app/lazyloading/blockchain/notification/completed-notifications/completed-notifications.component.ts","webpack:///./src/app/lazyloading/blockchain/notification/manage-notifications/manage-notifications.component.html","webpack:///./src/app/lazyloading/blockchain/notification/manage-notifications/manage-notifications.component.scss","webpack:///./src/app/lazyloading/blockchain/notification/manage-notifications/manage-notifications.component.ts","webpack:///./src/app/lazyloading/blockchain/notification/pending-notifications/pending-notifications.component.html","webpack:///./src/app/lazyloading/blockchain/notification/pending-notifications/pending-notifications.component.scss","webpack:///./src/app/lazyloading/blockchain/notification/pending-notifications/pending-notifications.component.ts","webpack:///./src/app/lazyloading/blockchain/organization/add-members-certificates/add-member-certificates-dialog/add-member-certificates-dialog.component.html","webpack:///./src/app/lazyloading/blockchain/organization/add-members-certificates/add-member-certificates-dialog/add-member-certificates-dialog.component.scss","webpack:///./src/app/lazyloading/blockchain/organization/add-members-certificates/add-member-certificates-dialog/add-member-certificates-dialog.component.ts","webpack:///./src/app/lazyloading/blockchain/organization/add-members-certificates/add-members-certificates.component.html","webpack:///./src/app/lazyloading/blockchain/organization/add-members-certificates/add-members-certificates.component.scss","webpack:///./src/app/lazyloading/blockchain/organization/add-members-certificates/add-members-certificates.component.ts","webpack:///./src/app/lazyloading/blockchain/organization/list-org-members/add-member-dialog/add-member-dialog.component.html","webpack:///./src/app/lazyloading/blockchain/organization/list-org-members/add-member-dialog/add-member-dialog.component.scss","webpack:///./src/app/lazyloading/blockchain/organization/list-org-members/add-member-dialog/add-member-dialog.component.ts","webpack:///./src/app/lazyloading/blockchain/organization/list-org-members/list-org-members.component.html","webpack:///./src/app/lazyloading/blockchain/organization/list-org-members/list-org-members.component.scss","webpack:///./src/app/lazyloading/blockchain/organization/list-org-members/list-org-members.component.ts","webpack:///./src/app/lazyloading/blockchain/organization/manage-members/manage-members.component.html","webpack:///./src/app/lazyloading/blockchain/organization/manage-members/manage-members.component.scss","webpack:///./src/app/lazyloading/blockchain/organization/manage-members/manage-members.component.ts","webpack:///./src/app/lazyloading/blockchain/peers/add-peer/add-peer.component.html","webpack:///./src/app/lazyloading/blockchain/peers/add-peer/add-peer.component.scss","webpack:///./src/app/lazyloading/blockchain/peers/add-peer/add-peer.component.ts","webpack:///./src/app/lazyloading/blockchain/peers/list-peers/list-peers.component.html","webpack:///./src/app/lazyloading/blockchain/peers/list-peers/list-peers.component.scss","webpack:///./src/app/lazyloading/blockchain/peers/list-peers/list-peers.component.ts","webpack:///./src/app/routings/blockchain.routing.ts"],"names":[],"mappings":"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","file":"lazyloading-blockchain-blockchain-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { BlockchainhomeComponent } from './blockchainhome/blockchainhome.component';\nimport { AddccComponent } from './chaincode/addcc/addcc.component';\nimport { BlockchainRoutingModule } from 'app/routings/blockchain.routing';\nimport { MaterialModule } from 'app/modules/material.module';\nimport { AddMemberComponent } from './ca/add-member/add-member.component';\nimport { InitiateCCComponent } from './chaincode/initiate-cc/initiate-cc.component';\nimport { AddPeerComponent } from './peers/add-peer/add-peer.component';\nimport { ManagechannelsComponent } from './channel/managechannels/managechannels.component';\nimport { ManageMembersComponent } from './organization/manage-members/manage-members.component';\nimport { AddMembersCertificatesComponent } from './organization/add-members-certificates/add-members-certificates.component';\nimport { AddChannelComponent } from './channel/add-channel/add-channel.component';\nimport { ManageCertificatesAuthorityComponent } from './ca/manage-certificates-authority/manage-certificates-authority.component';\nimport { ListOrgMembersComponent } from './organization/list-org-members/list-org-members.component';\nimport { ManageNotificationsComponent } from './notification/manage-notifications/manage-notifications.component';\nimport { AllNotificationsComponent } from './notification/all-notifications/all-notifications.component';\nimport { PendingNotificationsComponent } from './notification/pending-notifications/pending-notifications.component';\nimport { CompletedNotificationsComponent } from './notification/completed-notifications/completed-notifications.component';\nimport { AddMemberDialogComponent } from './organization/list-org-members/add-member-dialog/add-member-dialog.component';\nimport { AddMemberCertificatesDialogComponent } from './organization/add-members-certificates/add-member-certificates-dialog/add-member-certificates-dialog.component';\nimport { ListPeersComponent } from './peers/list-peers/list-peers.component';\nimport { RequestChannelComponent } from './channel/request-channel/request-channel.component';\nimport { InstallChaincodeComponent } from './chaincode/install-chaincode/install-chaincode.component';\nimport { ListChaincodeComponent } from './chaincode/list-chaincode/list-chaincode.component';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    BlockchainRoutingModule\n  ],\n  declarations: [\n    BlockchainhomeComponent,\n    ManagechannelsComponent,\n    AddccComponent,\n    AddMemberComponent,\n    ManageMembersComponent,\n    AddMembersCertificatesComponent,\n    AddChannelComponent,\n    InitiateCCComponent,\n    AddPeerComponent,\n    ManageCertificatesAuthorityComponent,\n    ListOrgMembersComponent,\n    ManageNotificationsComponent,\n    AllNotificationsComponent,\n    PendingNotificationsComponent,\n    CompletedNotificationsComponent,\n    AddMemberDialogComponent,\n    AddMemberCertificatesDialogComponent,\n    ListPeersComponent,\n    RequestChannelComponent,\n    InstallChaincodeComponent,\n    ListChaincodeComponent\n  ],\n  entryComponents: [\n    AddMemberDialogComponent,\n    AddMemberCertificatesDialogComponent,\n    AddChannelComponent,\n    RequestChannelComponent,\n    AddPeerComponent,\n    InstallChaincodeComponent,\n    AddMemberComponent,\n    InitiateCCComponent\n  ]\n})\nexport class BlockchainModule { }\n","module.exports = \"<div class=\\\"main-content\\\">\\n  <div class=\\\"container-fluid\\\">\\n    <div class=\\\"row\\\">\\n        <mat-tab-group>\\n            <mat-tab label=\\\"Members\\\">  \\n                <ng-template mat-tab-label>\\n                    <mat-icon class=\\\"example-tab-icon\\\" matTooltip=\\\"Members\\\" class=\\\"text-danger\\\">group</mat-icon>\\n                  </ng-template>\\n                  <app-manage-members></app-manage-members>\\n              </mat-tab>\\n              <mat-tab label=\\\"Channel\\\">\\n                  <ng-template mat-tab-label>\\n                      <mat-icon class=\\\"example-tab-icon\\\" matTooltip=\\\"Channels\\\" class=\\\"text-danger\\\">settings_input_component</mat-icon>\\n                    </ng-template>\\n                    <app-managechannels></app-managechannels>\\n              </mat-tab>\\n              <mat-tab label=\\\"Notification\\\">\\n                  <ng-template mat-tab-label>\\n                      <mat-icon class=\\\"example-tab-icon\\\" matTooltip=\\\"Notifications\\\" class=\\\"text-danger\\\">notifications</mat-icon>\\n                    </ng-template>\\n                    <app-manage-notifications></app-manage-notifications>\\n              </mat-tab>\\n              <mat-tab label=\\\"CA\\\">\\n                <ng-template mat-tab-label>\\n                    <mat-icon class=\\\"text-danger example-tab-icon\\\"  matTooltip=\\\"Certificate Authority\\\" >card_giftcard</mat-icon>\\n                  </ng-template>  \\n                  <app-manage-certificates-authority></app-manage-certificates-authority>  \\n            </mat-tab>\\n            <mat-tab label=\\\"Chaincode\\\">\\n                <ng-template mat-tab-label>\\n                    <mat-icon class=\\\"text-danger example-tab-icon\\\"  matTooltip=\\\"Chaincode\\\" >dvr</mat-icon>\\n                  </ng-template>\\n                  <app-list-chaincode></app-list-chaincode>\\n            </mat-tab>\\n            <mat-tab label=\\\"Peers\\\">\\n                <ng-template mat-tab-label>\\n                    <mat-icon class=\\\"text-danger example-tab-icon\\\" svgIcon=\\\"lan-pending\\\" matTooltip=\\\"Peers\\\" ></mat-icon>\\n                  </ng-template>\\n                  <app-list-peers></app-list-peers>\\n            </mat-tab>\\n\\n        </mat-tab-group>\\n\\n  </div>\\n</div>\\n</div>\"","module.exports = \"mat-tab-group {\\n  width: 100%; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MatIconRegistry } from '@angular/material';\n\n@Component({\n  selector: 'app-blockchainhome',\n  templateUrl: './blockchainhome.component.html',\n  styleUrls: ['./blockchainhome.component.scss']\n})\nexport class BlockchainhomeComponent implements OnInit {\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<h1 mat-dialog-title>{{data.title}}</h1>\\n<div mat-dialog-content>\\n  <div class=\\\"card\\\">\\n    <div class=\\\"card-body\\\">\\n\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n            <input matInput placeholder=\\\"User Name\\\" [(ngModel)]=\\\"data.name\\\">\\n          </mat-form-field>\\n        </div>\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field>\\n            <mat-label>Organizations</mat-label>\\n            <mat-select [(value)]=\\\"data.orgName\\\">\\n              <mat-option>--</mat-option>\\n              <mat-option *ngFor=\\\"let org of organizations\\\" [value]=\\\"org\\\">{{org}}</mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n<div mat-dialog-actions>\\n  <button mat-button class=\\\"btn btn-danger\\\" (click)=\\\"onNoClick()\\\">Cancel</button>\\n  <button mat-button class=\\\"btn btn-danger\\\" [mat-dialog-close]=\\\"data\\\" cdkFocusInitial>Add User</button>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\n\nexport interface DialogData {\n  title: string;\n  name: string;\n  orgName: string;\n}\n\n@Component({\n  selector: 'app-add-member',\n  templateUrl: './add-member.component.html',\n  styleUrls: ['./add-member.component.scss']\n})\nexport class AddMemberComponent implements OnInit {\n\n  organizations = ['Gov','Hec'];\n  constructor(\n    public dialogRef: MatDialogRef<AddMemberComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n    data.title = 'Add User'\n  }\n\n  ngOnInit() {\n\n  }\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n","module.exports = \"<div class=\\\"col-md-12\\\">\\n  <div class=\\\"col-md-12\\\">      \\n    <mat-form-field> \\n      <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Search CA\\\">\\n    </mat-form-field>\\n    <button mat-raised-button class=\\\"btn btn-danger\\\" id=\\\"addUser\\\" (click)=\\\"openAddUserDialog()\\\"><mat-icon svgIcon=\\\"account-plus-outline\\\"></mat-icon> Add User</button>\\n  </div>\\n\\n\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\n\\n    <!-- ID Column -->\\n    <ng-container matColumnDef=\\\"id\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ID </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.id}} </td>\\n    </ng-container>\\n\\n    <!-- Type Column -->\\n    <ng-container matColumnDef=\\\"type\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> TYPE </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.type}} </td>\\n    </ng-container>\\n\\n    <!-- Affiliation Column -->\\n    <ng-container matColumnDef=\\\"affiliation\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> AFFILIATION </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.affiliation}} </td>\\n    </ng-container>\\n\\n    <!-- action Column -->\\n    <ng-container matColumnDef=\\\"action\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ACTION </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <button *ngIf=\\\"element.id == 'admin'\\\" mat-button (click)=\\\"checkClick()\\\">\\n          <mat-icon matTooltip=\\\"Generate Certificate\\\">input</mat-icon></button>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n\\n</div>\"","module.exports = \"table {\\n  width: 100%; }\\n\\n#addUser {\\n  float: right;\\n  margin-top: 15px; }\\n\\nmat-form-field {\\n  display: inline-block !important; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTableDataSource, MatSort, MatDialog } from '@angular/material';\nimport { AddMemberComponent } from '../add-member/add-member.component';\n\nexport interface PeriodicElement {\n  id: string;\n  type: string;\n  affiliation: string;\n  action: string;\n}\n\nconst ELEMENT_DATA: PeriodicElement[] = [\n  {\n    id: 'admin',\n    type: 'Client',\n    affiliation: 'msp PeerOrg2',\n    action: \"<button>Generate Certificate</button>\"\n  },\n  {\n    id: 'univeristy',\n    type: 'Peer',\n    affiliation: 'mspPeerOrg1',\n    action: \"\"\n  }\n];\n \n@Component({\n  selector: 'app-manage-certificates-authority',\n  templateUrl: './manage-certificates-authority.component.html',\n  styleUrls: ['./manage-certificates-authority.component.scss']\n})\nexport class ManageCertificatesAuthorityComponent implements OnInit {\n\n  title: string;\n  name: string;\n  orgName: string;\n\n  constructor(\n    public dialog: MatDialog\n  ) { }\n  displayedColumns: string[] = [\n    'id',\n    'type',\n    'affiliation',\n    'action'\n  ];\n  dataSource = new MatTableDataSource(ELEMENT_DATA);\n\n  @ViewChild(MatSort) sort: MatSort;\n\n  ngOnInit() {\n    this.dataSource.sort = this.sort;\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  openAddUserDialog(): void {\n    const dialogRef = this.dialog.open(AddMemberComponent, {\n      width: '60%',\n      data: {\n        title: this.title,\n        name: this.name,\n        orgName: this.orgName\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      console.log(result);\n    });\n  }\n\n}\n","module.exports = \"<p>\\n  addcc works!\\n</p>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-addcc',\n  templateUrl: './addcc.component.html',\n  styleUrls: ['./addcc.component.scss']\n})\nexport class AddccComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<h1 mat-dialog-title>{{data.cc_title}}</h1>\\n<div mat-dialog-content>\\n    <div class=\\\"card\\\">\\n        <div class=\\\"card-body\\\">\\n\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input matInput placeholder=\\\"Chaincode Name\\\" [(ngModel)]=\\\"data.cc_name\\\">\\n                    </mat-form-field>\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input matInput placeholder=\\\"Version\\\" [(ngModel)]=\\\"data.cc_version\\\">\\n                    </mat-form-field>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input matInput placeholder=\\\"Function Name\\\" [(ngModel)]=\\\"data.cc_function\\\">\\n                    </mat-form-field>\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <mat-form-field class=\\\"example-full-width\\\">\\n                        <input matInput placeholder=\\\"Function Arguments\\\" [(ngModel)]=\\\"data.cc_arguments\\\">\\n                    </mat-form-field>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div mat-dialog-actions>\\n    <button mat-button class=\\\"btn btn-danger\\\" (click)=\\\"onNoClick()\\\">Cancel</button>\\n    <button mat-button class=\\\"btn btn-danger\\\" [mat-dialog-close]=\\\"data\\\" cdkFocusInitial>Initiate</button>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\n\nexport interface DialogData {\n  cc_title: string;\n  cc_name: string;\n  cc_version: string;\n  cc_function: string;\n  cc_arguments: string;\n}\n\n@Component({\n  selector: 'app-initiate-cc',\n  templateUrl: './initiate-cc.component.html',\n  styleUrls: ['./initiate-cc.component.scss']\n})\nexport class InitiateCCComponent implements OnInit {\n\n  constructor(\n    public dialogRef: MatDialogRef<InitiateCCComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n    data.cc_title = 'Initiate chaincode'\n  }\n\n  ngOnInit() {\n\n  }\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n","module.exports = \"<h1 mat-dialog-title>{{data.title}}</h1>\\n<div mat-dialog-content>\\n  <div class=\\\"card\\\">\\n    <div class=\\\"card-body\\\">\\n\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n            <input matInput placeholder=\\\"Chaincode Name\\\" [(ngModel)]=\\\"data.name\\\">\\n          </mat-form-field>\\n        </div>\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n            <input matInput placeholder=\\\"Peer Route\\\" [(ngModel)]=\\\"data.route\\\">\\n          </mat-form-field>\\n        </div>\\n      </div>\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n            <input matInput placeholder=\\\"Chaincode Version\\\" [(ngModel)]=\\\"data.version\\\">\\n          </mat-form-field>\\n        </div>\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field>\\n            <mat-label>MSP ID</mat-label>\\n            <mat-select [(value)]=\\\"data.mspId\\\">\\n              <mat-option>--</mat-option>\\n              <mat-option *ngFor=\\\"let msp of msps\\\" [value]=\\\"msp\\\">{{msp}}</mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </div>\\n      </div>\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field>\\n            <mat-label>Chaincode Type</mat-label>\\n            <mat-select [(value)]=\\\"data.languageType\\\">\\n              <mat-option>--</mat-option>\\n              <mat-option *ngFor=\\\"let language of languages\\\" [value]=\\\"language\\\">{{language}}</mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </div>\\n        <div class=\\\"col-md-6\\\">\\n\\n          <input class=\\\"btn btn-danger\\\" type=\\\"file\\\">\\n\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n<div mat-dialog-actions>\\n  <button mat-button class=\\\"btn btn-danger\\\" (click)=\\\"onNoClick()\\\">Cancel</button>\\n  <button mat-button class=\\\"btn btn-danger\\\" [mat-dialog-close]=\\\"data\\\" cdkFocusInitial>Install</button>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\n\nexport interface DialogData {\n  title: string;\n  name: string;\n  version: string;\n  languageType: string;\n  choosedFiles: string;\n  selectedPath: string;\n}\n\n@Component({\n  selector: 'app-install-chaincode',\n  templateUrl: './install-chaincode.component.html',\n  styleUrls: ['./install-chaincode.component.scss']\n})\nexport class InstallChaincodeComponent implements OnInit {\n\n  languages = ['Golang', 'Javascript'];\n  paths = ['gov', 'hec'];\n  constructor(\n    public dialogRef: MatDialogRef<InstallChaincodeComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n    data.title = 'Install chaincode'\n  }\n\n  ngOnInit() {\n\n  }\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n","module.exports = \"\\n<div class=\\\"col-md-12\\\">\\n    <div class=\\\"col-md-12\\\">\\n        <mat-form-field>\\n            <mat-label>Peers</mat-label>\\n            <mat-select [(value)]=\\\"selected\\\">\\n              <mat-option>--</mat-option>\\n              <mat-option value=\\\"fabric-peer-org1\\\">fabric-peer-org1</mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n   \\n      <button mat-raised-button class=\\\"btn btn-danger\\\" id=\\\"installCC\\\" (click)=\\\"openInstallChaincodeDialog()\\\">\\n        <mat-icon svgIcon=\\\"cogs\\\"></mat-icon> Install Chaincode</button>\\n    </div>\\n  \\n  \\n    <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\n  \\n      <!-- ID Column -->\\n      <ng-container matColumnDef=\\\"id\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> CODE ID </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.id}} </td>\\n      </ng-container>\\n  \\n      <!-- Version Column -->\\n      <ng-container matColumnDef=\\\"version\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> VERSION </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.version}} </td>\\n      </ng-container>\\n  \\n      <!-- action Column -->\\n      <ng-container matColumnDef=\\\"action\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> ACTION </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\">\\n            <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\" aria-label=\\\"Actions For Chaincode\\\">\\n                <mat-icon>more_vert</mat-icon>\\n              </button>\\n              <mat-menu #menu=\\\"matMenu\\\">\\n                <button mat-menu-item (click)=\\\"openInitiateChaincodeDialog()\\\">\\n                    <mat-icon svgIcon=\\\"rotate-3d\\\"></mat-icon>\\n                  <span>Initiate</span>\\n                </button>\\n                <button mat-menu-item>\\n                  <mat-icon>settings_input_component</mat-icon>\\n                  <span>View Channels</span>\\n                </button>\\n              </mat-menu>\\n        </td>\\n      </ng-container>\\n  \\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n    </table>\\n  \\n  </div>\"","module.exports = \"table {\\n  width: 100%; }\\n\\n#installCC {\\n  float: right;\\n  margin-top: 15px; }\\n\\nmat-form-field {\\n  display: inline-block !important; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTableDataSource, MatSort, MatDialog } from '@angular/material';\nimport { InstallChaincodeComponent } from '../install-chaincode/install-chaincode.component';\nimport { InitiateCCComponent } from '../initiate-cc/initiate-cc.component';\n\nexport interface PeriodicElement {\n  id: string;\n  version: string;\n  action: string;\n}\n\nconst ELEMENT_DATA: PeriodicElement[] = [\n  {\n    id: 'identity',\n    version: '1.0.0',\n    action: \"\"\n  }\n];\n\n@Component({\n  selector: 'app-list-chaincode',\n  templateUrl: './list-chaincode.component.html',\n  styleUrls: ['./list-chaincode.component.scss']\n})\nexport class ListChaincodeComponent implements OnInit {\n\n  title: string;\n  name: string;\n  version: string;\n  languageType: string;\n  choosedFiles: string;\n  selectedPath: string;\n  // Initiate dialog box variables\n  cc_title: string;\n  cc_name: string;\n  cc_version: string;\n  cc_function: string;\n  cc_arguments: Array<string>;\n\n\n  selected: any;\n  constructor(\n    public dialog: MatDialog\n  ) { }\n  displayedColumns: string[] = [\n    'id',\n    'version',\n    'action'\n  ];\n  dataSource = new MatTableDataSource(ELEMENT_DATA);\n\n  @ViewChild(MatSort) sort: MatSort;\n\n  ngOnInit() {\n    this.dataSource.sort = this.sort;\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  openInstallChaincodeDialog(): void {\n    const dialogRef = this.dialog.open(InstallChaincodeComponent, {\n      width: '80%',\n      data: {\n        title: this.title,\n        name: this.name,\n        version: this.version,\n        languageType: this.languageType,\n        choosedFiles: this.choosedFiles,\n        selectedPath: this.selectedPath\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      console.log(result);\n    });\n  }\n\n  openInitiateChaincodeDialog(): void {\n    const dialogRef = this.dialog.open(InitiateCCComponent, {\n      width: '50%',\n      data: {\n        cc_title: this.cc_title,\n        cc_name: this.cc_name,\n        cc_version: this.cc_version,\n        cc_function: this.cc_function,\n        cc_arguments: this.cc_arguments\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      console.log(result);\n    });\n  }\n\n}\n","module.exports = \"<h1 mat-dialog-title>{{data.title}}</h1>\\n<div mat-dialog-content>\\n  <div class=\\\"card\\\">\\n    <div class=\\\"card-body\\\">\\n\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n            <input matInput placeholder=\\\"Channel Name\\\" [(ngModel)]=\\\"data.channelName\\\">\\n          </mat-form-field>\\n        </div>\\n        <div class=\\\"col-md-6\\\">\\n            <mat-form-field>\\n                <mat-label>Channel File</mat-label>\\n                <mat-select [(value)]=\\\"data.channelFile\\\">\\n                  <mat-option>--</mat-option>\\n                  <mat-option *ngFor=\\\"let channel of channels\\\" [value]=\\\"channel\\\">{{channel}}</mat-option>\\n                </mat-select>\\n              </mat-form-field>\\n        </div>\\n      </div>\\n    </div>\\n  </div> \\n</div>\\n<div mat-dialog-actions>\\n  <button mat-button class=\\\"btn btn-danger\\\" (click)=\\\"onNoClick()\\\">Cancel</button>\\n  <button mat-button class=\\\"btn btn-danger\\\" [mat-dialog-close]=\\\"data\\\" cdkFocusInitial>Submit</button>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { ManagechannelsComponent } from '../managechannels/managechannels.component';\n\nexport interface DialogData {\n  title: string;\n  channelName: string;\n  channelFile:string;\n} \n\n@Component({\n  selector: 'app-add-channel',\n  templateUrl: './add-channel.component.html',\n  styleUrls: ['./add-channel.component.scss']\n})\nexport class AddChannelComponent implements OnInit {\n\n  channels = ['channel1','channel2'];\n  ngOnInit() {\n  }\n\n  constructor(\n    public dialogRef: MatDialogRef<ManagechannelsComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n      data.title ='Add Channel'; \n     }\n     \n    \n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n\n}\n ","module.exports = \"<div class=\\\"col-md-12\\\">\\n  <div class=\\\"col-md-12\\\">\\n    <mat-form-field>\\n      <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Search Channel\\\">\\n    </mat-form-field>\\n    <button mat-raised-button class=\\\"btn btn-danger\\\" id=\\\"addChannel\\\" (click)=\\\"openDialog()\\\">\\n      <mat-icon svgIcon=\\\"account-clock\\\"></mat-icon> Add Channel\\n    </button>\\n    <button mat-raised-button class=\\\"btn btn-danger\\\" id=\\\"addChannel\\\" (click)=\\\"openDialogRequestChannel()\\\">\\n      <mat-icon svgIcon=\\\"account-clock\\\"></mat-icon> Request Channel\\n    </button>\\n  </div>\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\n\\n    <!-- ID Column -->\\n    <ng-container matColumnDef=\\\"id\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ID </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.id}} </td>\\n    </ng-container>\\n\\n    <!-- Time Created Column -->\\n    <ng-container matColumnDef=\\\"timeCreated\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> TIME CREATED </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.timeCreated}} </td>\\n    </ng-container>\\n\\n    <!-- Block HeightColumn -->\\n    <ng-container matColumnDef=\\\"blockHeight\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> BLOCK HEIGHT </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.blockHeight}} </td>\\n    </ng-container>\\n\\n    <!-- Peers Column -->\\n    <ng-container matColumnDef=\\\"peers\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> PEERS </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.peers}} </td>\\n    </ng-container>\\n\\n    <!-- Permissions Column -->\\n    <ng-container matColumnDef=\\\"permissions\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> PERMISSIONS </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <p style=\\\"margin-bottom:0px;\\\">\\n          {{element.permissions[0]}}\\n        </p>\\n        <p style=\\\"margin-bottom:0px;\\\">\\n          {{element.permissions[1]}}\\n        </p>\\n        <p style=\\\"margin-bottom:0px;\\\">\\n          {{element.permissions[2]}}\\n        </p>\\n      </td>\\n    </ng-container>\\n\\n    <!-- action Column -->\\n    <ng-container matColumnDef=\\\"action\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ACTION </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\" aria-label=\\\"Actions For Chaincode\\\">\\n          <mat-icon>more_vert</mat-icon>\\n        </button>\\n        <mat-menu #menu=\\\"matMenu\\\">\\n          <button mat-menu-item>\\n            <mat-icon svgIcon=\\\"square-edit-outline\\\"></mat-icon>\\n            <span>Edit Channel</span>\\n          </button>\\n          <button mat-menu-item (click)=\\\"openSnackBarSyncCertificate()\\\">\\n            <mat-icon svgIcon=\\\"sync\\\"></mat-icon>\\n            <span>Sync Certificates</span>\\n          </button>\\n        </mat-menu>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n\\n</div>\"","module.exports = \"table {\\n  width: 100%; }\\n\\n#addChannel {\\n  float: right;\\n  margin-top: 15px; }\\n\\nmat-form-field {\\n  display: inline-block !important; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTableDataSource, MatSort, MatSnackBarHorizontalPosition, MatSnackBarVerticalPosition, MatSnackBar, MatDialog } from '@angular/material';\nimport { AddChannelComponent } from '../add-channel/add-channel.component';\nimport { RequestChannelComponent } from '../request-channel/request-channel.component';\n\n\nexport interface PeriodicElement {\n  id: string;\n  timeCreated: string;\n  blockHeight: Number;\n  peers: Number;\n  permissions:Array<string>;\n  action: string;\n}\n\nconst ELEMENT_DATA: PeriodicElement[] = [\n  {\n    id: 'gov',\n    timeCreated: '12/2/2019',\n    blockHeight: 20,\n    peers: 6,\n    permissions:['Operator','Writer','Reader'],\n    action: \"block\"\n  },\n  {\n    id: 'univeristy',\n    timeCreated: '12/4/2019',\n    blockHeight: 34,\n    peers: 3,\n    permissions:['Operator','Writer','Reader'],\n    action: \"unblock\"\n  },\n  {\n    id: 'School',\n    timeCreated: '12/4/2019',\n    blockHeight: 67,\n    peers: 6,\n    permissions:['Operator','Writer','Reader'],\n    action: \"block\"\n  }\n\n];\n\n\n\n@Component({\n  selector: 'app-managechannels',\n  templateUrl: './managechannels.component.html',\n  styleUrls: ['./managechannels.component.scss']\n})\nexport class ManagechannelsComponent implements OnInit {\n  \n  title: string;\n  channelName: string;\n  channelFile:string;\n  peers:Array<string>;\n  horizontalPosition: MatSnackBarHorizontalPosition = 'center';\n  verticalPosition: MatSnackBarVerticalPosition = 'bottom';\n\n  constructor(\n    public dialog: MatDialog,\n    private snackBar: MatSnackBar\n    ) { }\n\n\n  displayedColumns: string[] = [\n    'id',\n    'timeCreated',\n    'blockHeight',\n    'peers',\n    'permissions',\n    'action'\n  ];\n\n  dataSource = new MatTableDataSource(ELEMENT_DATA);\n\n  @ViewChild(MatSort) sort: MatSort;\n\n  ngOnInit() {\n    this.dataSource.sort = this.sort;\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  openDialog(): void {\n    const dialogRef = this.dialog.open(AddChannelComponent, {\n      width: '50%',\n      data: {  \n        title: this.title,\n        channelName: this.channelName,\n        channelFile:this.channelFile\n\n       }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      console.log(result);\n    });\n  }\n\n  openDialogRequestChannel(): void {\n    const dialogRef = this.dialog.open(RequestChannelComponent, {\n      width: '50%',\n      data: {  \n        title: this.title,\n        channelName: this.channelName,\n        peers:this.peers\n\n       }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      console.log(result);\n    });\n  }\n\n  openSnackBarSyncCertificate() {\n    this.snackBar.open('Certificates has been synchronized', 'Close', {\n      duration: 1000,\n      horizontalPosition: this.horizontalPosition,\n      verticalPosition: this.verticalPosition,\n    });\n  }\n\n}\n","module.exports = \"<h1 mat-dialog-title>{{data.title}}</h1>\\n<div mat-dialog-content>\\n  <div class=\\\"card\\\">\\n    <div class=\\\"card-body\\\">\\n\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n            <mat-form-field>\\n                <mat-label>Channel Name</mat-label>\\n                <mat-select [(value)]=\\\"data.channelName\\\">\\n                  <mat-option>--</mat-option>\\n                  <mat-option *ngFor=\\\"let channel of channels\\\" [value]=\\\"channel\\\">{{channel}}</mat-option>\\n                </mat-select>\\n              </mat-form-field>\\n        </div>\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field>\\n            <mat-label>Peers</mat-label>\\n            <mat-select [formControl]=\\\"peers\\\" [(value)]= \\\"data.peers\\\" multiple>\\n              <mat-option *ngFor=\\\"let peer of peersList\\\" [value]=\\\"peer\\\">{{peer}}</mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n<div mat-dialog-actions>\\n  <button mat-button class=\\\"btn btn-danger\\\" (click)=\\\"onNoClick()\\\">Cancel</button>\\n  <button mat-button class=\\\"btn btn-danger\\\" [mat-dialog-close]=\\\"data\\\" cdkFocusInitial>Submit</button>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { ManagechannelsComponent } from '../managechannels/managechannels.component';\nimport { FormControl, Validators } from '@angular/forms';\n\nexport interface DialogData {\n  title: string;\n  channelName: string;\n  peers: Array<string>;\n}\n@Component({\n  selector: 'app-request-channel',\n  templateUrl: './request-channel.component.html',\n  styleUrls: ['./request-channel.component.scss']\n})\nexport class RequestChannelComponent implements OnInit {\n  peers = new FormControl('',Validators.required);\n  channels = ['channel1', 'channel2'];\n  peersList = ['localhost:9001', 'localhost:9002'];\n  ngOnInit() {\n  }\n  constructor(\n    public dialogRef: MatDialogRef<ManagechannelsComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n    data.title = 'Request For Joining Channel';\n  }\n\n\n  onNoClick(): void {\n    this.dialogRef.close();\n    console.log(this.peers);\n  }\n\n}\n","module.exports = \"<div class=\\\"col-md-12\\\">\\n  <div class=\\\"col-md-12\\\">\\n    <mat-form-field>\\n      <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Search Notifications\\\">\\n    </mat-form-field>\\n\\n  </div>\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\n\\n    <!-- NAME Column -->\\n    <ng-container matColumnDef=\\\"name\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> NAME </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <span class=\\\"name\\\">{{element.name.type}}</span>\\n        <p class=\\\"message\\\">\\n          {{element.name.message}}\\n        </p>\\n      </td>\\n    </ng-container>\\n\\n    <!-- Time Updated Column -->\\n    <ng-container matColumnDef=\\\"timeUpdated\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> TIME UPDATED </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n         <span class=\\\"name\\\">{{element.timeUpdated.by}}</span>\\n         <p class=\\\"message\\\">\\n           {{element.timeUpdated.date}} {{element.timeUpdated.time}}\\n         </p> \\n        </td>\\n    </ng-container>\\n\\n    <!-- Block Status -->\\n    <ng-container matColumnDef=\\\"status\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> STATUS </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"name\\\">\\n        <i class=\\\"fa fa-circle text-danger\\\"></i>\\n        {{element.status}} </td>\\n    </ng-container>\\n\\n    <!-- action Column -->\\n    <ng-container matColumnDef=\\\"action\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ACTION </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <button mat-raised-button color='warn' (click)=\\\"checkClick()\\\">Reveiw Request</button>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n\\n</div>\"","module.exports = \"table {\\n  width: 100%; }\\n\\n.name {\\n  font-weight: 600;\\n  font-family: serif; }\\n\\n.message {\\n  font-size: 12px;\\n  font-family: serif; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTableDataSource, MatSort } from '@angular/material';\n\n\nexport interface PeriodicElement {\n  name: {};\n  timeUpdated: {};\n  status: string;\n  action: string;\n}\n\nconst ELEMENT_DATA: PeriodicElement[] = [\n  {\n    name: {\n      \"type\": \"Channel Request\",\n      \"message\": 'Join \"School\"'\n    },\n    timeUpdated: { \n      \"by\":\"By:Org1\",\n      \"date\":'12/2/2019',\n      \"time\":\"11:08:23 AM\"\n    },\n    status: 'Vote Pending',\n    action: \"pending\"\n  },\n  {\n    name: {\n      \"type\": \"Channel Request\",\n      \"message\": 'Join \"Gov\"'\n    },\n    timeUpdated: { \n      \"by\":\"By:Org2\",\n      \"date\":'12/2/2019',\n      \"time\":\"11:08:23 AM\"\n    },\n    status: 'Vote Pending',\n    action: \"pending\"\n  },\n  {\n    name: {\n      \"type\": \"Channel Request\",\n      \"message\": 'Join \"HEC\"'\n    },\n    timeUpdated: { \n      \"by\":\"By:Org3\",\n      \"date\":'12/2/2019',\n      \"time\":\"11:08:23 AM\"\n    },\n    status: 'Vote Pending',\n    action: \"pending\"\n  }\n\n];\n@Component({\n  selector: 'app-all-notifications',\n  templateUrl: './all-notifications.component.html',\n  styleUrls: ['./all-notifications.component.scss']\n})\nexport class AllNotificationsComponent implements OnInit {\n\n  constructor() { }\n  displayedColumns: string[] = [\n    'name',\n    'timeUpdated',\n    'status',\n    'action'\n  ];\n  dataSource = new MatTableDataSource(ELEMENT_DATA);\n\n  @ViewChild(MatSort) sort: MatSort;\n\n  ngOnInit() {\n    this.dataSource.sort = this.sort;\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  checkClick() {\n    console.log(\"clicked\");\n  }\n}\n","module.exports = \"<p>\\n  completed-notifications works!\\n</p>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-completed-notifications',\n  templateUrl: './completed-notifications.component.html',\n  styleUrls: ['./completed-notifications.component.scss']\n})\nexport class CompletedNotificationsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<mat-tab-group>\\n    <mat-tab>\\n      <ng-template mat-tab-label>\\n        <b class=\\\"text-danger\\\">All</b>\\n      </ng-template>\\n      <app-all-notifications></app-all-notifications>\\n    </mat-tab>\\n  \\n    <mat-tab>\\n      <ng-template mat-tab-label>\\n        <b class=\\\"text-danger\\\">Pending</b>\\n      </ng-template>\\n      <app-pending-notifications></app-pending-notifications>\\n    </mat-tab>\\n\\n    <mat-tab>\\n        <ng-template mat-tab-label>\\n          <b class=\\\"text-danger\\\">Completed</b>\\n        </ng-template>\\n        <app-completed-notifications></app-completed-notifications>\\n      </mat-tab>\\n  </mat-tab-group>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-manage-notifications',\n  templateUrl: './manage-notifications.component.html',\n  styleUrls: ['./manage-notifications.component.scss']\n})\nexport class ManageNotificationsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<p>\\n  pending-notifications works!\\n</p>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-pending-notifications',\n  templateUrl: './pending-notifications.component.html',\n  styleUrls: ['./pending-notifications.component.scss']\n})\nexport class PendingNotificationsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<h1 mat-dialog-title>{{data.title}}</h1>\\n<div mat-dialog-content>\\n  <div class=\\\"card\\\">\\n    <div class=\\\"card-body\\\">\\n\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n            <input matInput placeholder=\\\"Name\\\" [(ngModel)]=\\\"data.name\\\">\\n          </mat-form-field>\\n        </div>\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n            <input matInput placeholder=\\\"Certificate\\\" [(ngModel)]=\\\"data.certificate\\\">\\n          </mat-form-field>\\n        </div>\\n      </div>\\n    </div>\\n  </div> \\n</div>\\n<div mat-dialog-actions>\\n  <button mat-button class=\\\"btn btn-danger\\\" (click)=\\\"onNoClick()\\\">Cancel</button>\\n  <button mat-button class=\\\"btn btn-danger\\\" [mat-dialog-close]=\\\"data\\\" cdkFocusInitial>Submit</button>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { AddMembersCertificatesComponent } from '../add-members-certificates.component';\n\nexport interface DialogData {\n  title: string;\n  Orgname: string;\n  OperatorName:string;\n}\n\n@Component({\n  selector: 'app-add-member-certificates-dialog',\n  templateUrl: './add-member-certificates-dialog.component.html',\n  styleUrls: ['./add-member-certificates-dialog.component.scss']\n})\nexport class AddMemberCertificatesDialogComponent implements OnInit {\n\n  ngOnInit() {\n  } \n  \n  constructor(\n    public dialogRef: MatDialogRef<AddMembersCertificatesComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n      data.title ='Add Certificate' \n     }\n     \n    \n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n","module.exports = \"<div class=\\\"col-md-12\\\">\\n  <div class=\\\"col-md-12\\\">\\n    <mat-form-field>\\n      <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Search Certificate\\\">\\n    </mat-form-field>\\n    <button mat-raised-button class=\\\"btn btn-danger\\\" id=\\\"addMember\\\" (click)=\\\"openDialog()\\\"><mat-icon>add_circle_outline</mat-icon> Add\\n      Certificate</button>\\n  </div>\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\n\\n    <!-- Name Column -->\\n    <ng-container matColumnDef=\\\"name\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> NAME </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n    </ng-container>\\n\\n    <!-- date Added Column -->\\n    <ng-container matColumnDef=\\\"dateAdded\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> DATE ADDED </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.dateAdded}} </td>\\n    </ng-container>\\n\\n    <!-- action Column -->\\n    <ng-container matColumnDef=\\\"action\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ACTION </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n          <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\" aria-label=\\\"Actions For Chaincode\\\">\\n              <mat-icon>more_vert</mat-icon>\\n            </button>\\n            <mat-menu #menu=\\\"matMenu\\\">\\n              <button mat-menu-item (click)=\\\"openSnackBarCertificate()\\\" >\\n                <mat-icon svgIcon=\\\"square-edit-outline\\\"></mat-icon>\\n                <span>Revok</span>\\n              </button>\\n              <button mat-menu-item (click)=\\\"openSnackBarSyncCertificate()\\\">\\n                <mat-icon svgIcon=\\\"sync\\\"></mat-icon>\\n                <span>Sync Certificates</span>\\n              </button>\\n            </mat-menu>\\n        </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n\\n</div>\"","module.exports = \"table {\\n  width: 100%; }\\n\\n#addMember {\\n  float: right;\\n  margin-top: 15px; }\\n\\nmat-form-field {\\n  display: inline-block !important; }\\n\"","import { Component, OnInit, ViewChild} from '@angular/core';\nimport { MatTableDataSource, MatSort, MatDialog, MatSnackBarHorizontalPosition, MatSnackBarVerticalPosition, MatSnackBar } from '@angular/material';\nimport { AddMemberCertificatesDialogComponent } from './add-member-certificates-dialog/add-member-certificates-dialog.component';\n\n\nexport interface PeriodicElement {\n  name: string;\n  dateAdded: string;\n  action: string;\n}\n\nconst ELEMENT_DATA: PeriodicElement[] = [\n  {\n    name: 'john@gmail.com',\n    dateAdded: 'PeerOrg1',\n    action: \"block\"\n  },\n  {\n    name: 'johndoe@gmail.com',\n    dateAdded: 'PeerOrg1',\n    action: \"unblock\"\n  },\n  {\n    name: 'doe@gmail.com',\n    dateAdded: 'PeerOrg1',\n    action: \"block\"\n  }\n\n];\n\n@Component({\n  selector: 'app-add-members-certificates',\n  templateUrl: './add-members-certificates.component.html',\n  styleUrls: ['./add-members-certificates.component.scss']\n})\nexport class AddMembersCertificatesComponent implements OnInit {\n\n  title: string;\n  name: string;\n  certificate:string;\n    \n  horizontalPosition: MatSnackBarHorizontalPosition = 'center';\n  verticalPosition: MatSnackBarVerticalPosition = 'bottom';\n\n  constructor(\n    public dialog: MatDialog,\n    private snackBar: MatSnackBar\n    ) { }\n  displayedColumns: string[] = [\n    'name',\n    'dateAdded',\n    'action'\n  ];\n  \n  dataSource = new MatTableDataSource(ELEMENT_DATA);\n\n  @ViewChild(MatSort) sort: MatSort;\n\n  ngOnInit() {\n    this.dataSource.sort = this.sort;\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n  \n  openDialog(): void {\n    const dialogRef = this.dialog.open(AddMemberCertificatesDialogComponent, {\n      width: '50%',\n      data: {  \n        title: this.title,\n        name: this.name,\n        certificate:this.certificate\n\n       }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      console.log(result);\n    });\n  }\n\n  openSnackBarCertificate() {\n    this.snackBar.open('Certificate has been revoked', 'Close', {\n      duration: 1000,\n      horizontalPosition: this.horizontalPosition,\n      verticalPosition: this.verticalPosition,\n    });\n  }\n\n  openSnackBarSyncCertificate() {\n    this.snackBar.open('Certificate has been synchronized', 'Close', {\n      duration: 1000,\n      horizontalPosition: this.horizontalPosition,\n      verticalPosition: this.verticalPosition,\n    });\n  }\n}","module.exports = \"<h1 mat-dialog-title>{{data.title}}</h1>\\n<div mat-dialog-content>\\n  <div class=\\\"card\\\">\\n    <div class=\\\"card-body\\\">\\n\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n            <input matInput placeholder=\\\"Organization Name\\\" [(ngModel)]=\\\"data.Orgname\\\">\\n          </mat-form-field>\\n        </div>\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n            <input matInput placeholder=\\\"Operator Email\\\" [(ngModel)]=\\\"data.OperatorName\\\">\\n          </mat-form-field>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n<div mat-dialog-actions>\\n  <button mat-button class=\\\"btn btn-danger\\\" (click)=\\\"onNoClick()\\\">Cancel</button>\\n  <button mat-button class=\\\"btn btn-danger\\\" [mat-dialog-close]=\\\"data\\\" cdkFocusInitial>Add member</button>\\n</div>\"","module.exports = \"\"","import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\n\nexport interface DialogData {\n  title: string;\n  Orgname: string;\n  OperatorName: string;\n}\n\n@Component({\n  selector: 'app-add-member-dialog',\n  templateUrl: './add-member-dialog.component.html',\n  styleUrls: ['./add-member-dialog.component.scss']\n})\nexport class AddMemberDialogComponent {\n\n  constructor(\n    public dialogRef: MatDialogRef<AddMemberDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n    data.title = 'Add Member (organization)'\n  }\n\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n\n\n}\n","module.exports = \"<div class=\\\"col-md-12\\\">\\n  <div class=\\\"col-md-12\\\">\\n    <mat-form-field>\\n      <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Search Member\\\">\\n    </mat-form-field>\\n    <button mat-raised-button class=\\\"btn btn-danger\\\" id=\\\"addMember\\\" (click)=\\\"openDialog()\\\">\\n      <mat-icon svgIcon=\\\"account-plus-outline\\\"></mat-icon> Add User\\n    </button>\\n  </div>\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\n\\n    <!-- Member Column -->\\n    <ng-container matColumnDef=\\\"member\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> MEMBERS </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> \\n        <span class=\\\"heading\\\">{{element.member.org}} </span>\\n        <p class=\\\"message\\\">\\n          {{element.member.email}}\\n        </p> \\n      </td> \\n    </ng-container>\\n \\n    <!-- MSP Column -->\\n    <ng-container matColumnDef=\\\"msp\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> MSP ID </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"heading\\\"> {{element.msp}} </td>\\n    </ng-container>\\n\\n    <!-- Requester Column -->\\n    <ng-container matColumnDef=\\\"requester\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> REQUESTER </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"message\\\"> {{element.requester}} </td>\\n    </ng-container>\\n\\n    <!-- status Column -->\\n    <ng-container matColumnDef=\\\"status\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> STATUS </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"heading\\\"> <i *ngIf=\\\"element.status=='Joined';else pending\\\" matTooltip=\\\"Joined\\\"\\n          class=\\\"fa fa-circle text-success\\\"></i> {{element.status}}\\n        <ng-template #pending>\\n          <i matTooltip=\\\"Joined\\\" class=\\\"fa fa-circle\\\"></i>\\n        </ng-template>\\n      </td>\\n    </ng-container>\\n\\n    <!-- action Column -->\\n    <ng-container matColumnDef=\\\"action\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ACTION </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <button mat-icon-button color=\\\"warn\\\" aria-label=\\\"Icon\\\" [disabled]=\\\"!element.action\\\" (click)=\\\"openSnackBar()\\\" [(value)]=\\\"verticalPosition\\\">\\n          <mat-icon svgIcon='close-circle-outline'></mat-icon>\\n        </button>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n\\n</div>\"","module.exports = \"table {\\n  width: 100%; }\\n\\n#addMember {\\n  float: right;\\n  margin-top: 15px; }\\n\\nmat-form-field {\\n  display: inline-block !important; }\\n\\n.heading {\\n  font-family: serif; }\\n\\n.message {\\n  font-size: 12px;\\n  font-family: serif; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTableDataSource, MatSort, MatDialog, MatSnackBarVerticalPosition, MatSnackBar, MatSnackBarHorizontalPosition } from '@angular/material';\nimport { AddMemberDialogComponent } from './add-member-dialog/add-member-dialog.component';\n\nexport interface PeriodicElement {\n  member: {};\n  msp: string;\n  requester: string;\n  status: string;\n  action: boolean;\n}\n\nconst ELEMENT_DATA: PeriodicElement[] = [\n  {\n    member: {\n      \"org\": \"Org1\",\n      \"email\": 'john@gmail.com'\n    },\n    msp: 'PeerOrg1',\n    requester: 'john@gmail.com',\n    status: \"Joined\",\n    action: false\n  },\n  {\n    member: {\n      \"org\": \"Org1\",\n      \"email\": 'johndoe@gmail.com'\n    },\n    msp: 'PeerOrg1',\n    requester: 'johndoe@gmail.com',\n    status: \"Pending\",\n    action: true\n  },\n  {\n    member: {\n      \"org\": \"Org1\",\n      \"email\": 'doe@gmail.com'\n    },\n    msp: 'PeerOrg1',\n    requester: 'doe@gmail.com',\n    status: \"Joined\",\n    action: false\n  }\n\n];\n\n@Component({\n  selector: 'app-list-org-members',\n  templateUrl: './list-org-members.component.html',\n  styleUrls: ['./list-org-members.component.scss']\n})\nexport class ListOrgMembersComponent implements OnInit {\n  title: string;\n  Orgname: string;\n  OperatorName:string;\n\n  verticalPosition: MatSnackBarVerticalPosition = 'bottom';\n  horizontalPosition: MatSnackBarHorizontalPosition = 'center';\n  \n  constructor(\n    public dialog: MatDialog,\n    private snackBar: MatSnackBar\n    ) { }\n  displayedColumns: string[] = [\n    'member',\n    'msp',\n    'requester',\n    'status',\n    'action'\n  ];\n  dataSource = new MatTableDataSource(ELEMENT_DATA);\n\n  @ViewChild(MatSort) sort: MatSort;\n  blinker: boolean = true;\n  ngOnInit() {\n    this.dataSource.sort = this.sort;\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n  openDialog(): void {\n    const dialogRef = this.dialog.open(AddMemberDialogComponent, {\n      width: '50%',\n      data: {  \n        title: this.title,\n        Orgname: this.Orgname,\n        OperatorName:this.OperatorName\n\n       }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      console.log(result);\n    });\n  }\n\n  openSnackBar() {\n    this.snackBar.open('Organization removed', 'Close', {\n      duration: 1000,\n      horizontalPosition: this.horizontalPosition,\n      verticalPosition: this.verticalPosition,\n    });\n  }\n\n}\n","module.exports = \"<mat-tab-group>\\n  <mat-tab>\\n    <ng-template mat-tab-label>\\n      <b class=\\\"text-danger\\\">Members</b>\\n    </ng-template>\\n    <app-list-org-members></app-list-org-members>\\n  </mat-tab>\\n\\n  <mat-tab>\\n    <ng-template mat-tab-label>\\n      <b class=\\\"text-danger\\\">Certificates</b>\\n    </ng-template>\\n    <app-add-members-certificates></app-add-members-certificates>\\n  </mat-tab>\\n</mat-tab-group>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-manage-members',\n  templateUrl: './manage-members.component.html',\n  styleUrls: ['./manage-members.component.scss']\n})\nexport class ManageMembersComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<h1 mat-dialog-title>{{data.title}}</h1>\\n<div mat-dialog-content>\\n  <div class=\\\"card\\\">\\n    <div class=\\\"card-body\\\">\\n\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n            <input matInput placeholder=\\\"Peer Name\\\" [(ngModel)]=\\\"data.name\\\">\\n          </mat-form-field>\\n        </div>\\n        <div class=\\\"col-md-6\\\">\\n          <mat-form-field class=\\\"example-full-width\\\">\\n            <input matInput placeholder=\\\"Peer Route\\\" [(ngModel)]=\\\"data.route\\\">\\n          </mat-form-field>\\n        </div>\\n      </div>\\n      <div class=\\\"row\\\">\\n          <div class=\\\"col-md-6\\\">\\n              <mat-form-field>\\n                  <mat-label>Node Type</mat-label>\\n                  <mat-select [(value)]=\\\"data.type\\\">\\n                    <mat-option>--</mat-option>\\n                    <mat-option *ngFor=\\\"let type of types\\\" [value]=\\\"type\\\">{{type}}</mat-option>\\n                  </mat-select>\\n                </mat-form-field>\\n          </div>\\n          <div class=\\\"col-md-6\\\">\\n              <mat-form-field>\\n                  <mat-label>MSP ID</mat-label>\\n                  <mat-select [(value)]=\\\"data.mspId\\\">\\n                    <mat-option>--</mat-option>\\n                    <mat-option *ngFor=\\\"let msp of msps\\\" [value]=\\\"msp\\\">{{msp}}</mat-option>\\n                  </mat-select>\\n                </mat-form-field>\\n          </div>\\n        </div>\\n    </div>\\n  </div>\\n</div>\\n<div mat-dialog-actions>\\n  <button mat-button class=\\\"btn btn-danger\\\" (click)=\\\"onNoClick()\\\">Cancel</button>\\n  <button mat-button class=\\\"btn btn-danger\\\" [mat-dialog-close]=\\\"data\\\" cdkFocusInitial>Add node</button>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\n\n\nexport interface DialogData {\n  title: string;\n  name: string;\n  route: string;\n  type: string;\n  mspId: string;\n}\n\n@Component({\n  selector: 'app-add-peer',\n  templateUrl: './add-peer.component.html',\n  styleUrls: ['./add-peer.component.scss']\n})\nexport class AddPeerComponent implements OnInit {\n\n  types = ['peer','ca','orderer'];\n  msps = ['gov','school'];\n  constructor(\n    public dialogRef: MatDialogRef<AddPeerComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {\n    data.title = 'Add Node'\n  }\n\n  ngOnInit() {\n\n  }\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n","module.exports = \"<div class=\\\"col-md-12\\\">\\n  <div class=\\\"col-md-12\\\">\\n    <mat-form-field>\\n      <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n    </mat-form-field>\\n    <button mat-raised-button class=\\\"btn btn-danger\\\" id=\\\"addNode\\\" (click)=\\\"openDialog()\\\">\\n      <mat-icon>add_to_queue</mat-icon> Add Node\\n    </button>\\n  </div>\\n  <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\n\\n    <!-- NAME Column -->\\n    <ng-container matColumnDef=\\\"name\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> NAME </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        {{element.name}}\\n      </td>\\n    </ng-container>\\n\\n    <!-- ROUTE Column -->\\n    <ng-container matColumnDef=\\\"route\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> ROUTE </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.route}} </td>\\n    </ng-container>\\n\\n    <!-- TYPE Column -->\\n    <ng-container matColumnDef=\\\"type\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> TYPE </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.type}} </td>\\n    </ng-container>\\n\\n    <!-- MSP ID Column -->\\n    <ng-container matColumnDef=\\\"mspId\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> MSP ID </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.mspId}} </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n\\n</div>\"","module.exports = \"table {\\n  width: 100%; }\\n\\n#addNode {\\n  float: right;\\n  margin-top: 15px; }\\n\\nmat-form-field {\\n  display: inline-block !important; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTableDataSource, MatSort, MatDialog } from '@angular/material';\nimport { AddPeerComponent } from '../add-peer/add-peer.component';\n\nexport interface PeriodicElement {\n  name: string;\n  route: string;\n  type: string;\n  mspId: string;\n}\n\nconst ELEMENT_DATA: PeriodicElement[] = [\n  {\n    name: 'peer0.ims.com',\n    route: 'grpc://localhost:2030',\n    type: 'Peer(Member)',\n    mspId: 'Gov',\n  },\n  {\n    name: 'orderer.ims.com',\n    route: 'grpc://localhost:2130',\n    type: 'Orderer',\n    mspId: 'Gov',\n  },\n  {\n    name: 'govca.ims.com',\n    route: 'grpc://localhost:2131',\n    type: 'CA',\n    mspId: 'Gov',\n  },\n\n];\n@Component({\n  selector: 'app-list-peers',\n  templateUrl: './list-peers.component.html',\n  styleUrls: ['./list-peers.component.scss']\n})\nexport class ListPeersComponent implements OnInit {\n\n  title: string;\n  name: string;\n  route: string;\n  type: string;\n  mspId: string;\n\n  constructor(public dialog: MatDialog) { }\n  displayedColumns: string[] = [\n    'name',\n    'route',\n    'type',\n    'mspId'\n  ];\n  dataSource = new MatTableDataSource(ELEMENT_DATA);\n\n  @ViewChild(MatSort) sort: MatSort;\n  blinker: boolean = true;\n  ngOnInit() {\n    this.dataSource.sort = this.sort;\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n  openDialog(): void {\n    const dialogRef = this.dialog.open(AddPeerComponent, {\n      width: '50%',\n      data: {\n        title: this.title,\n        name: this.name,\n        route: this.route,\n        type: this.type,\n        mspId: this.mspId\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      console.log(result);\n    });\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule, } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { Routes, RouterModule } from '@angular/router';\nimport { BlockchainhomeComponent } from 'app/lazyloading/blockchain/blockchainhome/blockchainhome.component';\n\n\n\nconst routes: Routes = [\n  { path: '', component: BlockchainhomeComponent }\n];\n\n@NgModule({\n\n  imports: [\n    RouterModule.forChild(routes),\n    CommonModule\n  ],\n  exports: [RouterModule]\n\n})\nexport class BlockchainRoutingModule { }\n"],"sourceRoot":""}