{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ngx-mask/app/ngx-mask/config.ts","ng://ngx-mask/app/ngx-mask/mask-applier.service.ts","ng://ngx-mask/app/ngx-mask/mask.service.ts","ng://ngx-mask/app/ngx-mask/mask.directive.ts","ng://ngx-mask/app/ngx-mask/mask.pipe.ts","ng://ngx-mask/app/ngx-mask/ngx-mask.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__read","o","m","ar","error","config","InjectionToken","NEW_CONFIG","INITIAL_CONFIG","initialConfig","sufix","prefix","clearIfNotMatch","showTemplate","showMaskTyped","dropSpecialCharacters","hiddenInput","shownMaskExpression","validation","specialCharacters","patterns","0","pattern","RegExp","9","optional","X","symbol","A","S","M","H","h","withoutValidation","MaskApplierService","_config","maskExpression","actualValue","prevResult","prevActualResult","separator","str","char","decimalChar","precision","x","split","decimals","res","rgx","test","replace","undefined","substr","percentage","Number","getPrecision","Infinity","checkInputPrecision","inputValue","decimalMarker","precisionRegEx","precisionMatch","match","substring","endsWith","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","applyMaskWithPattern","maskAndPattern","_a","mask","customPattern","applyMask","position","cb","cursor","result","multi","backspaceShift","shift","slice","inputArray","toString","filter","ipError","startsWith","decCount","_checkInput","strForSep","indexOf","lastIndexOf","includes","commaShift","shiftStep","add","clear","inputSymbol","_checkSymbolMask","_findSpecialChar","newPosition","has","find","val","maskSymbol","join","Injectable","tslib_1.__param","Inject","MaskService","document","_elementRef","_renderer","_this","_super","isNumberValue","maskIsShown","selStart","selEnd","onChange","onTouch","_formElement","nativeElement","__","constructor","create","tslib_1.__extends","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","shiftTypedSymbols","getActualValue","item","hideInput","resLen","prefNmask","applyValueChanges","maskedInput","activeElement","clearIfNotMatchFn","map","curr","index","compare","symbolToReplace","currSymbol","replaceSymbol","inputVal","Error","_checkForIp","formElementProperty","_b","name","setProperty","checkSpecialCharAmount","arr","isArray","_removeMask","_removeSufix","_removePrefix","_checkSymbols","specialCharactersForRemove","_regExpForRemove","toFixed","DOCUMENT","ElementRef","Renderer2","MaskDirective","_maskService","_position","ngOnChanges","changes","_maskValue","currentValue","_applyMask","validate","Mask error","counterOfOpt","length_1","onInput","el","_inputValue","selectionStart","caretShift","_backspaceShift","selectionEnd","_code","onBlur","onFocus","keyCode","setSelectionRange","focus","a","code","preventDefault","cursorStart","onPaste","MAX_SAFE_INTEGER","writeValue","_arguments","generator","String","P","Promise","resolve","reject","fulfilled","rejected","then","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_repeatPatternSymbols","maskExp","reduce","accum","currval","_start","_end","repeatNumber","tslib_1.__decorate","Input","HostListener","KeyboardEvent","MaskDirective_1","Directive","selector","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NG_VALIDATORS","MaskPipe","transform","Pipe","pure","NgxMaskModule","forRoot","configValue","ngModule","NgxMaskModule_1","useValue","useFactory","_configFactory","deps","forChild","_configValue","NgModule","exports","declarations","initConfig"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { InjectionToken } from '@angular/core';\n\nexport interface IConfig {\n    sufix: string;\n    prefix: string;\n    clearIfNotMatch: boolean;\n    showTemplate: boolean;\n    showMaskTyped: boolean;\n    shownMaskExpression: string;\n    dropSpecialCharacters: boolean | string[];\n    specialCharacters: string[];\n    hiddenInput: boolean;\n    validation: boolean;\n    patterns: {\n        [character: string]: {\n            pattern: RegExp;\n            optional?: boolean;\n            symbol?: string;\n        };\n    };\n}\n\nexport type optionsConfig = Partial<IConfig>;\nexport const config: InjectionToken<string> = new InjectionToken('config');\nexport const NEW_CONFIG: InjectionToken<string> = new InjectionToken('NEW_CONFIG');\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\n\nexport const initialConfig: IConfig = {\n    sufix: '',\n    prefix: '',\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    dropSpecialCharacters: true,\n    hiddenInput: false,\n    shownMaskExpression: '',\n    validation: true,\n    // tslint:disable-next-line: quotemark\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true,\n        },\n        X: {\n            pattern: new RegExp('\\\\d'),\n            symbol: '*',\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]'),\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]'),\n        },\n        d: {\n            pattern: new RegExp('\\\\d'),\n        },\n        m: {\n            pattern: new RegExp('\\\\d'),\n        },\n        M: {\n            pattern: new RegExp('\\\\d'),\n        },\n        H: {\n            pattern: new RegExp('\\\\d'),\n        },\n        h: {\n            pattern: new RegExp('\\\\d'),\n        },\n        s: {\n            pattern: new RegExp('\\\\d'),\n        },\n    },\n};\n\nexport const withoutValidation: string[] = [\n    'percent',\n    'Hh:m0:s0',\n    'Hh:m0',\n    'Hh',\n    'm0:s0',\n    's0',\n    'm0',\n    'separator',\n    'dot_separator',\n    'comma_separator',\n    'd0/M0/0000',\n    'd0/M0',\n    'd0',\n    'M0',\n];\n","import { Inject, Injectable } from '@angular/core';\nimport { config, IConfig } from './config';\n\n@Injectable()\nexport class MaskApplierService {\n    public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n    public hiddenInput: IConfig['hiddenInput'];\n    public showTemplate!: IConfig['showTemplate'];\n    public clearIfNotMatch!: IConfig['clearIfNotMatch'];\n    public maskExpression: string = '';\n    public actualValue: string = '';\n    public shownMaskExpression: string = '';\n    public maskSpecialCharacters!: IConfig['specialCharacters'];\n    public maskAvailablePatterns!: IConfig['patterns'];\n    public prefix!: IConfig['prefix'];\n    public sufix!: IConfig['sufix'];\n    public customPattern!: IConfig['patterns'];\n    public ipError?: boolean;\n    protected prevResult: string = '';\n    protected prevActualResult: string = '';\n\n    private _shift!: Set<number>;\n\n    public constructor(@Inject(config) protected _config: IConfig) {\n        this._shift = new Set();\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config!.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.sufix = this._config.sufix;\n        this.hiddenInput = this._config.hiddenInput;\n    }\n    // tslint:disable-next-line:no-any\n    public applyMaskWithPattern(inputValue: string, maskAndPattern: [string, IConfig['patterns']]): string {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    public applyMask(\n        inputValue: string,\n        maskExpression: string,\n        position: number = 0,\n        cb: Function = () => {}\n    ): string {\n        if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n            return '';\n        }\n        let cursor: number = 0;\n        let result: string = ``;\n        let multi: boolean = false;\n        let backspaceShift: boolean = false;\n        let shift: number = 1;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        const inputArray: string[] = inputValue.toString().split('');\n        if (maskExpression === 'IP') {\n            if (inputArray.filter((i: string) => i === '.').length < 3 && inputArray.length < 7) {\n                this.ipError = true;\n            } else {\n                this.ipError = false;\n            }\n            maskExpression = '099.099.099.099';\n        }\n        if (maskExpression.startsWith('percent')) {\n            const decCount: string | number = maskExpression.split('.')[1];\n            if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/]/)) {\n                inputValue = this._checkInput(inputValue);\n                if (inputValue.length >= 3 && inputValue !== '100') {\n                    inputValue = inputValue.substring(0, decCount ? +decCount : 2);\n                }\n            }\n            if (this.percentage(inputValue)) {\n                result = inputValue;\n            } else {\n                result = inputValue.substring(0, inputValue.length - 1);\n            }\n        } else if (\n            maskExpression === 'separator' ||\n            maskExpression === 'dot_separator' ||\n            maskExpression.startsWith('dot_separator') ||\n            maskExpression === 'comma_separator' ||\n            maskExpression.startsWith('comma_separator')\n        ) {\n            if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-@#!$%\\\\^&*()_Â£Â¬'+|~=`{}\\[\\]:\";<>.?\\/]/)) {\n                inputValue = this._checkInput(inputValue);\n            }\n            const precision: number = this.getPrecision(maskExpression);\n            let strForSep: string;\n            if (maskExpression.startsWith('dot_separator')) {\n                if (\n                    inputValue.indexOf('.') !== -1 &&\n                    inputValue.indexOf('.') === inputValue.lastIndexOf('.') &&\n                    inputValue.indexOf('.') > 3\n                ) {\n                    inputValue = inputValue.replace('.', ',');\n                }\n                inputValue =\n                    inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== ','\n                        ? inputValue.slice(1, inputValue.length)\n                        : inputValue;\n            }\n            if (maskExpression.startsWith('comma_separator')) {\n                inputValue =\n                    inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== '.'\n                        ? inputValue.slice(1, inputValue.length)\n                        : inputValue;\n            }\n            if (maskExpression === 'separator') {\n                if (\n                    inputValue.includes(',') &&\n                    inputValue.endsWith(',') &&\n                    inputValue.indexOf(',') !== inputValue.lastIndexOf(',')\n                ) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[@#!$%^&*()_+|~=`{}\\[\\]:.\";<>?\\/]/)) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                strForSep = inputValue.replace(/\\s/g, '');\n                result = this.separator(strForSep, ' ', '.', precision);\n            } else if (maskExpression === 'dot_separator' || maskExpression.startsWith('dot_separator')) {\n                if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[@#!$%^&*()_+|~=`{}\\[\\]:\\s\";<>?\\/]/)) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                inputValue = this.checkInputPrecision(inputValue, precision, ',');\n                strForSep = inputValue.replace(/\\./g, '');\n                result = this.separator(strForSep, '.', ',', precision);\n            } else if (maskExpression === 'comma_separator' || maskExpression.startsWith('comma_separator')) {\n                strForSep = inputValue.replace(/\\,/g, '');\n                result = this.separator(strForSep, ',', '.', precision);\n            }\n\n            const commaShift: number = result.indexOf(',') - inputValue.indexOf(',');\n            const shiftStep: number = result.length - inputValue.length;\n\n            if (shiftStep > 0 && result[position] !== ',') {\n                backspaceShift = true;\n                let _shift: number = 0;\n                do {\n                    this._shift.add(position + _shift);\n                    _shift++;\n                } while (_shift < shiftStep);\n            } else if (\n                commaShift !== 0 &&\n                result.indexOf(',') !== -1 &&\n                result.indexOf(',') < position &&\n                shiftStep <= 0\n            ) {\n                this._shift.clear();\n                backspaceShift = true;\n                shift = shiftStep;\n                position += shiftStep;\n                this._shift.add(position);\n            } else {\n                this._shift.clear();\n            }\n        } else {\n            for (\n                // tslint:disable-next-line\n                let i: number = 0, inputSymbol: string = inputArray[0];\n                i < inputArray.length;\n                i++, inputSymbol = inputArray[i]\n            ) {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n                    result += inputSymbol;\n                    cursor += 2;\n                } else if (\n                    maskExpression[cursor + 1] === '*' &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n                ) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                } else if (\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor]) &&\n                    maskExpression[cursor + 1] === '*'\n                ) {\n                    result += inputSymbol;\n                    multi = true;\n                } else if (\n                    maskExpression[cursor + 1] === '?' &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n                ) {\n                    result += inputSymbol;\n                    cursor += 3;\n                } else if (\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor]) ||\n                    (this.hiddenInput &&\n                        this.maskAvailablePatterns[maskExpression[cursor]] &&\n                        this.maskAvailablePatterns[maskExpression[cursor]].symbol === inputSymbol)\n                ) {\n                    if (maskExpression[cursor] === 'H') {\n                        if (Number(inputSymbol) > 2) {\n                            result += 0;\n                            cursor += 1;\n                            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'h') {\n                        if (result === '2' && Number(inputSymbol) > 3) {\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'm') {\n                        if (Number(inputSymbol) > 5) {\n                            result += 0;\n                            cursor += 1;\n                            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 's') {\n                        if (Number(inputSymbol) > 5) {\n                            result += 0;\n                            cursor += 1;\n                            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'd') {\n                        if (Number(inputSymbol) > 3) {\n                            result += 0;\n                            cursor += 1;\n                            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor - 1] === 'd') {\n                        if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 31) {\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'M') {\n                        if (Number(inputSymbol) > 1) {\n                            result += 0;\n                            cursor += 1;\n                            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor - 1] === 'M') {\n                        if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 12) {\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                        ? inputArray.length\n                        : cursor;\n                    this._shift.add(shiftStep + this.prefix.length || 0);\n                    i--;\n                } else if (\n                    this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\n                    this.maskAvailablePatterns[maskExpression[cursor]] &&\n                    this.maskAvailablePatterns[maskExpression[cursor]].optional\n                ) {\n                    cursor++;\n                    i--;\n                } else if (\n                    this.maskExpression[cursor + 1] === '*' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi\n                ) {\n                    cursor += 3;\n                    result += inputSymbol;\n                } else if (\n                    this.maskExpression[cursor + 1] === '?' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi\n                ) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n            }\n        }\n        if (\n            result.length + 1 === maskExpression.length &&\n            this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1\n        ) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n\n        let newPosition: number = position + 1;\n\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n\n        cb(this._shift.has(position) ? shift : 0, backspaceShift);\n        if (shift < 0) {\n            this._shift.clear();\n        }\n        let res: string = `${this.prefix}${result}`;\n        res = this.sufix ? `${this.prefix}${result}${this.sufix}` : `${this.prefix}${result}`;\n        if (result.length === 0) {\n            res = `${this.prefix}${result}`;\n        }\n        return res;\n    }\n    public _findSpecialChar(inputSymbol: string): undefined | string {\n        const symbol: string | undefined = this.maskSpecialCharacters.find((val: string) => val === inputSymbol);\n        return symbol;\n    }\n\n    protected _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\n        this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n        return (\n            this.maskAvailablePatterns[maskSymbol] &&\n            this.maskAvailablePatterns[maskSymbol].pattern &&\n            this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol)\n        );\n    }\n\n    private separator = (str: string, char: string, decimalChar: string, precision: number) => {\n        str += '';\n        const x: string[] = str.split(decimalChar);\n        const decimals: string = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n        let res: string = x[0];\n        const rgx: RegExp = /(\\d+)(\\d{3})/;\n        while (rgx.test(res)) {\n            res = res.replace(rgx, '$1' + char + '$2');\n        }\n        if (precision === undefined) {\n            return res + decimals;\n        } else if (precision === 0) {\n            return res;\n        }\n        return res + decimals.substr(0, precision + 1);\n    };\n\n    private percentage = (str: string): boolean => {\n        return Number(str) >= 0 && Number(str) <= 100;\n    };\n\n    private getPrecision = (maskExpression: string): number => {\n        const x: string[] = maskExpression.split('.');\n        if (x.length > 1) {\n            return Number(x[x.length - 1]);\n        }\n        return Infinity;\n    };\n\n    private checkInputPrecision = (inputValue: string, precision: number, decimalMarker: string): string => {\n        if (precision < Infinity) {\n            let precisionRegEx: RegExp;\n\n            if (decimalMarker === '.') {\n                precisionRegEx = new RegExp(`\\\\.\\\\d{${precision}}.*$`);\n            } else {\n                precisionRegEx = new RegExp(`,\\\\d{${precision}}.*$`);\n            }\n\n            const precisionMatch: RegExpMatchArray | null = inputValue.match(precisionRegEx);\n            if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            } else if (precision === 0 && inputValue.endsWith(decimalMarker)) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n        }\n        return inputValue;\n    };\n\n    private _checkInput(str: string): string {\n        return str\n            .split('')\n            .filter((i: string) => i.match('\\\\d') || i === '.' || i === ',')\n            .join('');\n    }\n    // tslint:disable-next-line: max-file-line-count\n}\n","import { ElementRef, Inject, Injectable, Renderer2 } from '@angular/core';\nimport { config, IConfig } from './config';\nimport { DOCUMENT } from '@angular/common';\nimport { MaskApplierService } from './mask-applier.service';\n\n@Injectable()\nexport class MaskService extends MaskApplierService {\n    public validation: boolean = true;\n    public maskExpression: string = '';\n    public isNumberValue: boolean = false;\n    public showMaskTyped: boolean = false;\n    public maskIsShown: string = '';\n    public selStart: number | null = null;\n    public selEnd: number | null = null;\n    protected _formElement: HTMLInputElement;\n    // tslint:disable-next-line\n    public onChange = (_: any) => {};\n    public onTouch = () => {};\n    public constructor(\n        // tslint:disable-next-line\n        @Inject(DOCUMENT) private document: any,\n        @Inject(config) protected _config: IConfig,\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2\n    ) {\n        super(_config);\n        this._formElement = this._elementRef.nativeElement;\n    }\n\n    // tslint:disable-next-line:cyclomatic-complexity\n    public applyMask(\n        inputValue: string,\n        maskExpression: string,\n        position: number = 0,\n        cb: Function = () => {}\n    ): string {\n        if (!maskExpression) {\n            return inputValue;\n        }\n        this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n        if (this.maskExpression === 'IP' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (!inputValue && this.showMaskTyped) {\n            this.formControlResult(this.prefix);\n            return this.prefix + this.maskIsShown;\n        }\n        const getSymbol: string = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n        let newInputValue: string = '';\n        if (this.hiddenInput && newInputValue === undefined) {\n            let actualResult: string[] = this.actualValue.split('');\n            inputValue !== '' && actualResult.length\n                ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n                    ? inputValue.length > actualResult.length\n                        ? actualResult.splice(this.selStart, 0, getSymbol)\n                        : inputValue.length < actualResult.length\n                        ? actualResult.length - inputValue.length === 1\n                            ? actualResult.splice(this.selStart - 1, 1)\n                            : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n                        : null\n                    : null\n                : (actualResult = []);\n            newInputValue = this.actualValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n        }\n        newInputValue = newInputValue.length ? newInputValue : inputValue;\n        const result: string = super.applyMask(newInputValue, maskExpression, position, cb);\n        this.actualValue = this.getActualValue(result);\n\n        if (/dot_separator\\.\\d{1,}/.test(this.maskExpression) === true && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== ',');\n        }\n        if ('dot_separator' === this.maskExpression && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== ',');\n        }\n        if (/comma_separator\\.\\d{1,}/.test(this.maskExpression) === true && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== '.');\n        }\n        if ('comma_separator' === this.maskExpression && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== '.');\n        }\n\n        this.formControlResult(result);\n\n        let ifMaskIsShown: string = '';\n        if (!this.showMaskTyped) {\n            if (this.hiddenInput) {\n                return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n            }\n            return result;\n        }\n        const resLen: number = result.length;\n        const prefNmask: string = this.prefix + this.maskIsShown;\n        ifMaskIsShown = this.maskExpression === 'IP' ? prefNmask : prefNmask.slice(resLen);\n        return result + ifMaskIsShown;\n    }\n\n    public applyValueChanges(position: number = 0, cb: Function = () => {}): void {\n        const maskedInput: string | number = this.applyMask(this._formElement.value, this.maskExpression, position, cb);\n        this._formElement.value = maskedInput;\n        if (this._formElement === this.document.activeElement) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n\n    public hideInput(inputValue: string, maskExpression: string): string {\n        return inputValue\n            .split('')\n            .map((curr: string, index: number) => {\n                if (\n                    this.maskAvailablePatterns &&\n                    this.maskAvailablePatterns[maskExpression[index]] &&\n                    this.maskAvailablePatterns[maskExpression[index]].symbol\n                ) {\n                    return this.maskAvailablePatterns[maskExpression[index]].symbol;\n                }\n                return curr;\n            })\n            .join('');\n    }\n\n    // this function is not necessary, it checks result against maskExpression\n    public getActualValue(res: string): string {\n        const compare: string[] = res\n            .split('')\n            .filter(\n                (symbol: string, i: number) =>\n                    this._checkSymbolMask(symbol, this.maskExpression[i]) ||\n                    (this.maskSpecialCharacters.includes(this.maskExpression[i]) && symbol === this.maskExpression[i])\n            );\n        if (compare.join('') === res) {\n            return compare.join('');\n        }\n        return res;\n    }\n\n    public shiftTypedSymbols(inputValue: string): string {\n        let symbolToReplace: string = '';\n        const newInputValue: string[] =\n            (inputValue &&\n                inputValue.split('').map((currSymbol: string, index: number) => {\n                    if (\n                        this.maskSpecialCharacters.includes(inputValue[index + 1]) &&\n                        inputValue[index + 1] !== this.maskExpression[index + 1]\n                    ) {\n                        symbolToReplace = currSymbol;\n                        return inputValue[index + 1];\n                    }\n                    if (symbolToReplace.length) {\n                        const replaceSymbol: string = symbolToReplace;\n                        symbolToReplace = '';\n                        return replaceSymbol;\n                    }\n                    return currSymbol;\n                })) ||\n            [];\n        return newInputValue.join('');\n    }\n\n    public showMaskInInput(inputVal?: string): string {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            } else {\n                return this.shownMaskExpression;\n            }\n        } else if (this.showMaskTyped) {\n            if (inputVal) {\n                return this._checkForIp(inputVal);\n            }\n            return this.maskExpression.replace(/\\w/g, '_');\n        }\n        return '';\n    }\n\n    public clearIfNotMatchFn(): void {\n        if (this.clearIfNotMatch === true && this.maskExpression.length !== this._formElement.value.length) {\n            this.formElementProperty = ['value', ''];\n            this.applyMask(this._formElement.value, this.maskExpression);\n        }\n    }\n\n    public set formElementProperty([name, value]: [string, string | boolean]) {\n        this._renderer.setProperty(this._formElement, name, value);\n    }\n\n    public checkSpecialCharAmount(mask: string): number {\n        const chars: string[] = mask.split('').filter((item: string) => this._findSpecialChar(item));\n        return chars.length;\n    }\n\n    // tslint:disable-next-line: cyclomatic-complexity\n    private _checkForIp(inputVal: string): string {\n        if (inputVal === '#') {\n            return '_._._._';\n        }\n        const arr: string[] = [];\n        for (let i: number = 0; i < inputVal.length; i++) {\n            if (inputVal[i].match('\\\\d')) {\n                arr.push(inputVal[i]);\n            }\n        }\n        if (arr.length <= 3) {\n            return '_._._';\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return '_._';\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return '_';\n        }\n        if (arr.length > 9 && arr.length <= 12) {\n            return '';\n        }\n        return '';\n    }\n\n    private formControlResult(inputValue: string): void {\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            this.onChange(\n                this._removeMask(this._removeSufix(this._removePrefix(inputValue)), this.dropSpecialCharacters)\n            );\n        } else if (this.dropSpecialCharacters === true) {\n            this.onChange(this._checkSymbols(inputValue));\n        } else {\n            this.onChange(this._removeSufix(this._removePrefix(inputValue)));\n        }\n    }\n\n    private _removeMask(value: string, specialCharactersForRemove: string[]): string {\n        return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n    }\n\n    private _removePrefix(value: string): string {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, '') : value;\n    }\n\n    private _removeSufix(value: string): string {\n        if (!this.sufix) {\n            return value;\n        }\n        return value ? value.replace(this.sufix, '') : value;\n    }\n\n    private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\n        return new RegExp(specialCharactersForRemove.map((item: string) => `\\\\${item}`).join('|'), 'gi');\n    }\n    private _checkSymbols(result: string): string | number | undefined | null {\n        if ('dot_separator.2' === this.maskExpression && this.isNumberValue) {\n            // tslint:disable-next-line:max-line-length\n            return result === ''\n                ? result\n                : result === ','\n                ? null\n                : Number(\n                      this._removeMask(\n                          this._removeSufix(this._removePrefix(result)),\n                          this.maskSpecialCharacters\n                      ).replace(',', '.')\n                  ).toFixed(2);\n        }\n        if ('comma_separator.2' === this.maskExpression && this.isNumberValue) {\n            // tslint:disable-next-line:max-line-length\n            return result === ''\n                ? result\n                : result === '.'\n                ? null\n                : Number(\n                      this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters)\n                  ).toFixed(2);\n        }\n        if (this.isNumberValue) {\n            return result === ''\n                ? result\n                : Number(this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters));\n        } else if (\n            this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters).indexOf(',') !==\n            -1\n        ) {\n            return this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters).replace(\n                ',',\n                '.'\n            );\n        } else {\n            return this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters);\n        }\n    }\n}\n","import { Directive, forwardRef, HostListener, Inject, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ControlValueAccessor, FormControl, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors } from '@angular/forms';\nimport { MaskService } from './mask.service';\nimport { config, IConfig, withoutValidation } from './config';\n\n@Directive({\n    selector: '[mask]',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true,\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true,\n        },\n        MaskService,\n    ],\n})\nexport class MaskDirective implements ControlValueAccessor, OnChanges {\n    @Input('mask') public maskExpression: string = '';\n    @Input() public specialCharacters: IConfig['specialCharacters'] = [];\n    @Input() public patterns: IConfig['patterns'] = {};\n    @Input() public prefix: IConfig['prefix'] = '';\n    @Input() public sufix: IConfig['sufix'] = '';\n    @Input() public dropSpecialCharacters: IConfig['dropSpecialCharacters'] | null = null;\n    @Input() public hiddenInput: IConfig['hiddenInput'] | null = null;\n    @Input() public showMaskTyped: IConfig['showMaskTyped'] | null = null;\n    @Input() public shownMaskExpression: IConfig['shownMaskExpression'] | null = null;\n    @Input() public showTemplate: IConfig['showTemplate'] | null = null;\n    @Input() public clearIfNotMatch: IConfig['clearIfNotMatch'] | null = null;\n    @Input() public validation: IConfig['validation'] | null = null;\n    private _maskValue!: string;\n    private _inputValue!: string;\n    private _position: number | null = null;\n    // tslint:disable-next-line\n    private _start!: number;\n    private _end!: number;\n    private _code!: string;\n    // tslint:disable-next-line\n    public onChange = (_: any) => {};\n    public onTouch = () => {};\n\n    public constructor(\n        // tslint:disable-next-line\n        @Inject(DOCUMENT) private document: any,\n        private _maskService: MaskService\n    ) {}\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        // tslint:disable-next-line:max-line-length\n        const {\n            maskExpression,\n            specialCharacters,\n            patterns,\n            prefix,\n            sufix,\n            dropSpecialCharacters,\n            hiddenInput,\n            showMaskTyped,\n            shownMaskExpression,\n            showTemplate,\n            clearIfNotMatch,\n            validation,\n        } = changes;\n        if (maskExpression) {\n            this._maskValue = changes.maskExpression.currentValue || '';\n        }\n        if (specialCharacters) {\n            if (\n                !specialCharacters.currentValue ||\n                !Array.isArray(specialCharacters.currentValue) ||\n                (Array.isArray(specialCharacters.currentValue) && !specialCharacters.currentValue.length)\n            ) {\n                return;\n            }\n            this._maskService.maskSpecialCharacters = changes.specialCharacters.currentValue || '';\n        }\n        if (patterns) {\n            this._maskService.maskAvailablePatterns = patterns.currentValue;\n        }\n        if (prefix) {\n            this._maskService.prefix = prefix.currentValue;\n        }\n        if (sufix) {\n            this._maskService.sufix = sufix.currentValue;\n        }\n        if (dropSpecialCharacters) {\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n        if (hiddenInput) {\n            this._maskService.hiddenInput = hiddenInput.currentValue;\n        }\n        if (showMaskTyped) {\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\n        }\n        if (shownMaskExpression) {\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n        if (showTemplate) {\n            this._maskService.showTemplate = showTemplate.currentValue;\n        }\n        if (clearIfNotMatch) {\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n        if (validation) {\n            this._maskService.validation = validation.currentValue;\n        }\n        this._applyMask();\n    }\n\n    // tslint:disable-next-line: cyclomatic-complexity\n    public validate({ value }: FormControl): ValidationErrors | null {\n        if (!this._maskService.validation) {\n            return null;\n        }\n        if (this._maskService.ipError) {\n            return { 'Mask error': true };\n        } else if (!this._maskService.ipError) {\n            return null;\n        }\n        if (\n            /dot_separator\\.\\d{1,}/.test(this._maskValue) === true ||\n            /comma_separator\\.\\d{1,}/.test(this._maskValue) === true\n        ) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (value && value.toString().length >= 1) {\n            let counterOfOpt: number = 0;\n            for (const key in this._maskService.maskAvailablePatterns) {\n                if (\n                    this._maskService.maskAvailablePatterns[key].optional &&\n                    this._maskService.maskAvailablePatterns[key].optional === true\n                ) {\n                    if (this._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (\n                        this._maskValue.indexOf(key) !== -1 &&\n                        value.toString().length >= this._maskValue.indexOf(key)\n                    ) {\n                        return null;\n                    }\n                    if (counterOfOpt === this._maskValue.length) {\n                        return null;\n                    }\n                }\n            }\n            if (\n                this._maskValue.indexOf('*') === 1 ||\n                this._maskValue.indexOf('?') === 1 ||\n                this._maskValue.indexOf('{') === 1\n            ) {\n                return null;\n            } else if (\n                (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*')) ||\n                (this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?'))\n            ) {\n                return { 'Mask error': true };\n            }\n            if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n                const length: number = this._maskService.dropSpecialCharacters\n                    ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt\n                    : this._maskValue.length - counterOfOpt;\n                if (value.toString().length !== length) {\n                    return { 'Mask error': true };\n                }\n            }\n        }\n        return null;\n    }\n\n    @HostListener('input', ['$event'])\n    public onInput(e: KeyboardEvent): void {\n        const el: HTMLInputElement = e.target as HTMLInputElement;\n        this._inputValue = el.value;\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n        const position: number =\n            el.selectionStart === 1\n                ? (el.selectionStart as number) + this._maskService.prefix.length\n                : (el.selectionStart as number);\n        let caretShift: number = 0;\n        let backspaceShift: boolean = false;\n        this._maskService.applyValueChanges(position, (shift: number, _backspaceShift: boolean) => {\n            caretShift = shift;\n            backspaceShift = _backspaceShift;\n        });\n        // only set the selection if the element is active\n        if (this.document.activeElement !== el) {\n            return;\n        }\n        this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n        el.selectionStart = el.selectionEnd =\n            this._position !== null\n                ? this._position\n                : position +\n                  // tslint:disable-next-line\n                  (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n        this._position = null;\n    }\n\n    @HostListener('blur')\n    public onBlur(): void {\n        this._maskService.clearIfNotMatchFn();\n        this.onTouch();\n    }\n\n    @HostListener('click', ['$event'])\n    public onFocus(e: MouseEvent | KeyboardEvent): void {\n        const el: HTMLInputElement = e.target as HTMLInputElement;\n        const posStart: number = 0;\n        const posEnd: number = 0;\n        if (\n            el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // tslint:disable-next-line\n            (e as any).keyCode !== 38\n        )\n            if (this._maskService.showMaskTyped) {\n                // ) {\n                //     return;\n                // }\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\n                if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                }\n            }\n        el.value =\n            !el.value || el.value === this._maskService.prefix\n                ? this._maskService.prefix + this._maskService.maskIsShown\n                : el.value;\n        /** fix of cursor position with prefix when mouse click occur */\n        if (((el.selectionStart as number) || (el.selectionEnd as number)) <= this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    public a(e: KeyboardEvent): void {\n        this._code = e.code;\n        const el: HTMLInputElement = e.target as HTMLInputElement;\n        this._maskService.selStart = el.selectionStart;\n        this._maskService.selEnd = el.selectionEnd;\n        if (e.keyCode === 38) {\n            e.preventDefault();\n        }\n        if (e.keyCode === 37 || e.keyCode === 8) {\n            if (e.keyCode === 37) {\n                el.selectionStart = (el.selectionEnd as number) - 1;\n            }\n            if (e.keyCode === 8 && el.value.length === 0) {\n                el.selectionStart = el.selectionEnd;\n            }\n            if (\n                (el.selectionStart as number) <= this._maskService.prefix.length &&\n                (el.selectionEnd as number) <= this._maskService.prefix.length\n            ) {\n                e.preventDefault();\n            }\n            const cursorStart: number | null = el.selectionStart;\n            // this.onFocus(e);\n            if (e.keyCode === 8 && cursorStart === 0 && el.selectionEnd === el.value.length && el.value.length !== 0) {\n                this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n                this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n            }\n        }\n    }\n\n    @HostListener('paste')\n    public onPaste(): void {\n        this._position = Number.MAX_SAFE_INTEGER;\n    }\n\n    /** It writes the value in the input */\n    public async writeValue(inputValue: string): Promise<void> {\n        if (inputValue === undefined) {\n            inputValue = '';\n        }\n        if (typeof inputValue === 'number') {\n            inputValue = String(inputValue);\n            inputValue = this._maskValue.startsWith('dot_separator') ? inputValue.replace('.', ',') : inputValue;\n            this._maskService.isNumberValue = true;\n        }\n        (inputValue && this._maskService.maskExpression) ||\n        (this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped))\n            ? (this._maskService.formElementProperty = [\n                  'value',\n                  this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n              ])\n            : (this._maskService.formElementProperty = ['value', inputValue]);\n        this._inputValue = inputValue;\n    }\n\n    // tslint:disable-next-line\n    public registerOnChange(fn: any): void {\n        this.onChange = fn;\n        this._maskService.onChange = this.onChange;\n    }\n\n    // tslint:disable-next-line\n    public registerOnTouched(fn: any): void {\n        this.onTouch = fn;\n    }\n\n    /** It disables the input element */\n    public setDisabledState(isDisabled: boolean): void {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n\n    private _repeatPatternSymbols(maskExp: string): string {\n        return (\n            (maskExp.match(/{[0-9]+}/) &&\n                maskExp.split('').reduce((accum: string, currval: string, index: number): string => {\n                    this._start = currval === '{' ? index : this._start;\n\n                    if (currval !== '}') {\n                        return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n                    }\n                    this._end = index;\n                    const repeatNumber: number = Number(maskExp.slice(this._start + 1, this._end));\n                    const repaceWith: string = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                    return accum + repaceWith;\n                }, '')) ||\n            maskExp\n        );\n    }\n    // tslint:disable-next-line:no-any\n    private _applyMask(): any {\n        this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n        ];\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { MaskApplierService } from './mask-applier.service';\nimport { IConfig } from './config';\n\n@Pipe({\n    name: 'mask',\n    pure: true,\n})\nexport class MaskPipe implements PipeTransform {\n    public constructor(private _maskService: MaskApplierService) {}\n\n    public transform(value: string | number, mask: string | [string, IConfig['patterns']]): string {\n        if (!value && typeof value !== 'number') {\n            return '';\n        }\n        if (typeof mask === 'string') {\n            return this._maskService.applyMask(`${value}`, mask);\n        }\n        return this._maskService.applyMaskWithPattern(`${value}`, mask);\n    }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\nimport { MaskDirective } from './mask.directive';\nimport { MaskPipe } from './mask.pipe';\n\n@NgModule({\n    providers: [MaskApplierService],\n    exports: [MaskDirective, MaskPipe],\n    declarations: [MaskDirective, MaskPipe],\n})\nexport class NgxMaskModule {\n    public static forRoot(configValue?: optionsConfig): ModuleWithProviders {\n        return {\n            ngModule: NgxMaskModule,\n            providers: [\n                {\n                    provide: NEW_CONFIG,\n                    useValue: configValue,\n                },\n                {\n                    provide: INITIAL_CONFIG,\n                    useValue: initialConfig,\n                },\n                {\n                    provide: config,\n                    useFactory: _configFactory,\n                    deps: [INITIAL_CONFIG, NEW_CONFIG],\n                },\n            ],\n        };\n    }\n    public static forChild(_configValue?: optionsConfig): ModuleWithProviders {\n        return {\n            ngModule: NgxMaskModule,\n        };\n    }\n}\n\n/**\n * @internal\n */\nexport function _configFactory(\n    initConfig: optionsConfig,\n    configValue: optionsConfig | (() => optionsConfig)\n): Function | optionsConfig {\n    return typeof configValue === 'function' ? configValue() : { ...initConfig, ...configValue };\n}\n"]}